Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement_list statement
Rule 3     statement_list -> statement
Rule 4     for -> FOR for_assign IN expression statement_block
Rule 5     for -> WHILE expression statement_block
Rule 6     statement -> assign
Rule 7     assign -> LET NAME = expression
Rule 8     assign -> VAR NAME = expression
Rule 9     assign -> NAME = expression
Rule 10    statement_block -> { statement_list }
Rule 11    for_assign -> NAME
Rule 12    statement_block -> statement
Rule 13    statement -> print
Rule 14    statement -> expression
Rule 15    statement -> for
Rule 16    print -> PRINT ( print_expression_list )
Rule 17    print -> PRINT ( expression )
Rule 18    expression -> READLINE ( )
Rule 19    expression -> MIN ( expression , expression )
Rule 20    expression -> MAX ( expression , expression )
Rule 21    expression -> ABS ( expression )
Rule 22    expression -> expression POWER expression
Rule 23    expression -> - expression
Rule 24    expression -> expression + expression
Rule 25    expression -> expression - expression
Rule 26    expression -> expression * expression
Rule 27    expression -> expression / expression
Rule 28    expression -> expression % expression
Rule 29    expression -> expression ELLIPSIS expression
Rule 30    expression -> NUMBER
Rule 31    expression -> NAME
Rule 32    expression -> DQ_STRING
Rule 33    expression -> SQ_STRING
Rule 34    expression -> ( expression )
Rule 35    expression -> expression DOUBLE_EQ expression
Rule 36    expression -> expression NOT_EQ expression
Rule 37    expression -> expression > expression
Rule 38    expression -> expression < expression
Rule 39    expression -> expression LESS_EQ expression
Rule 40    expression -> expression GREATER_EQ expression
Rule 41    statement -> IF expression { statement_block }
Rule 42    statement -> IF expression { statement } ELSE { statement_block }
Rule 43    print_expression_list -> <empty>
Rule 44    print_expression_list -> print_expression_list print_expression
Rule 45    print_expression_list -> print_expression
Rule 46    print_expression -> expression ,

Terminals, with rules where they appear

%                    : 28
(                    : 16 17 18 19 20 21 34
)                    : 16 17 18 19 20 21 34
*                    : 26
+                    : 24
,                    : 19 20 46
-                    : 23 25
/                    : 27
<                    : 38
=                    : 7 8 9
>                    : 37
ABS                  : 21
DOUBLE_EQ            : 35
DQ_STRING            : 32
ELLIPSIS             : 29
ELSE                 : 42
FOR                  : 4
GREATER_EQ           : 40
IF                   : 41 42
IN                   : 4
LESS_EQ              : 39
LET                  : 7
MAX                  : 20
MIN                  : 19
NAME                 : 7 8 9 11 31
NOT_EQ               : 36
NUMBER               : 30
POWER                : 22
PRINT                : 16 17
READLINE             : 18
SQ_STRING            : 33
VAR                  : 8
WHILE                : 5
error                : 
{                    : 10 41 42 42
}                    : 10 41 42 42

Nonterminals, with rules where they appear

assign               : 6
expression           : 4 5 7 8 9 14 17 19 19 20 20 21 22 22 23 24 24 25 25 26 26 27 27 28 28 29 29 34 35 35 36 36 37 37 38 38 39 39 40 40 41 42 46
for                  : 15
for_assign           : 4
print                : 13
print_expression     : 44 45
print_expression_list : 16 44
program              : 0
statement            : 2 3 12 42
statement_block      : 4 5 41 42
statement_list       : 1 2 10

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (6) statement -> . assign
    (13) statement -> . print
    (14) statement -> . expression
    (15) statement -> . for
    (41) statement -> . IF expression { statement_block }
    (42) statement -> . IF expression { statement } ELSE { statement_block }
    (7) assign -> . LET NAME = expression
    (8) assign -> . VAR NAME = expression
    (9) assign -> . NAME = expression
    (16) print -> . PRINT ( print_expression_list )
    (17) print -> . PRINT ( expression )
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression
    (4) for -> . FOR for_assign IN expression statement_block
    (5) for -> . WHILE expression statement_block

    IF              shift and go to state 8
    LET             shift and go to state 9
    VAR             shift and go to state 11
    NAME            shift and go to state 10
    PRINT           shift and go to state 12
    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13
    FOR             shift and go to state 22
    WHILE           shift and go to state 23

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assign                         shift and go to state 4
    print                          shift and go to state 5
    expression                     shift and go to state 6
    for                            shift and go to state 7

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (2) statement_list -> statement_list . statement
    (6) statement -> . assign
    (13) statement -> . print
    (14) statement -> . expression
    (15) statement -> . for
    (41) statement -> . IF expression { statement_block }
    (42) statement -> . IF expression { statement } ELSE { statement_block }
    (7) assign -> . LET NAME = expression
    (8) assign -> . VAR NAME = expression
    (9) assign -> . NAME = expression
    (16) print -> . PRINT ( print_expression_list )
    (17) print -> . PRINT ( expression )
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression
    (4) for -> . FOR for_assign IN expression statement_block
    (5) for -> . WHILE expression statement_block

    $end            reduce using rule 1 (program -> statement_list .)
    IF              shift and go to state 8
    LET             shift and go to state 9
    VAR             shift and go to state 11
    NAME            shift and go to state 10
    PRINT           shift and go to state 12
    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13
    FOR             shift and go to state 22
    WHILE           shift and go to state 23

    statement                      shift and go to state 24
    assign                         shift and go to state 4
    print                          shift and go to state 5
    expression                     shift and go to state 6
    for                            shift and go to state 7

state 3

    (3) statement_list -> statement .

    IF              reduce using rule 3 (statement_list -> statement .)
    LET             reduce using rule 3 (statement_list -> statement .)
    VAR             reduce using rule 3 (statement_list -> statement .)
    NAME            reduce using rule 3 (statement_list -> statement .)
    PRINT           reduce using rule 3 (statement_list -> statement .)
    READLINE        reduce using rule 3 (statement_list -> statement .)
    MIN             reduce using rule 3 (statement_list -> statement .)
    MAX             reduce using rule 3 (statement_list -> statement .)
    ABS             reduce using rule 3 (statement_list -> statement .)
    -               reduce using rule 3 (statement_list -> statement .)
    NUMBER          reduce using rule 3 (statement_list -> statement .)
    DQ_STRING       reduce using rule 3 (statement_list -> statement .)
    SQ_STRING       reduce using rule 3 (statement_list -> statement .)
    (               reduce using rule 3 (statement_list -> statement .)
    FOR             reduce using rule 3 (statement_list -> statement .)
    WHILE           reduce using rule 3 (statement_list -> statement .)
    $end            reduce using rule 3 (statement_list -> statement .)
    }               reduce using rule 3 (statement_list -> statement .)


state 4

    (6) statement -> assign .

    IF              reduce using rule 6 (statement -> assign .)
    LET             reduce using rule 6 (statement -> assign .)
    VAR             reduce using rule 6 (statement -> assign .)
    NAME            reduce using rule 6 (statement -> assign .)
    PRINT           reduce using rule 6 (statement -> assign .)
    READLINE        reduce using rule 6 (statement -> assign .)
    MIN             reduce using rule 6 (statement -> assign .)
    MAX             reduce using rule 6 (statement -> assign .)
    ABS             reduce using rule 6 (statement -> assign .)
    -               reduce using rule 6 (statement -> assign .)
    NUMBER          reduce using rule 6 (statement -> assign .)
    DQ_STRING       reduce using rule 6 (statement -> assign .)
    SQ_STRING       reduce using rule 6 (statement -> assign .)
    (               reduce using rule 6 (statement -> assign .)
    FOR             reduce using rule 6 (statement -> assign .)
    WHILE           reduce using rule 6 (statement -> assign .)
    $end            reduce using rule 6 (statement -> assign .)
    }               reduce using rule 6 (statement -> assign .)


state 5

    (13) statement -> print .

    IF              reduce using rule 13 (statement -> print .)
    LET             reduce using rule 13 (statement -> print .)
    VAR             reduce using rule 13 (statement -> print .)
    NAME            reduce using rule 13 (statement -> print .)
    PRINT           reduce using rule 13 (statement -> print .)
    READLINE        reduce using rule 13 (statement -> print .)
    MIN             reduce using rule 13 (statement -> print .)
    MAX             reduce using rule 13 (statement -> print .)
    ABS             reduce using rule 13 (statement -> print .)
    -               reduce using rule 13 (statement -> print .)
    NUMBER          reduce using rule 13 (statement -> print .)
    DQ_STRING       reduce using rule 13 (statement -> print .)
    SQ_STRING       reduce using rule 13 (statement -> print .)
    (               reduce using rule 13 (statement -> print .)
    FOR             reduce using rule 13 (statement -> print .)
    WHILE           reduce using rule 13 (statement -> print .)
    $end            reduce using rule 13 (statement -> print .)
    }               reduce using rule 13 (statement -> print .)


state 6

    (14) statement -> expression .
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

  ! shift/reduce conflict for - resolved as shift
    IF              reduce using rule 14 (statement -> expression .)
    LET             reduce using rule 14 (statement -> expression .)
    VAR             reduce using rule 14 (statement -> expression .)
    NAME            reduce using rule 14 (statement -> expression .)
    PRINT           reduce using rule 14 (statement -> expression .)
    READLINE        reduce using rule 14 (statement -> expression .)
    MIN             reduce using rule 14 (statement -> expression .)
    MAX             reduce using rule 14 (statement -> expression .)
    ABS             reduce using rule 14 (statement -> expression .)
    NUMBER          reduce using rule 14 (statement -> expression .)
    DQ_STRING       reduce using rule 14 (statement -> expression .)
    SQ_STRING       reduce using rule 14 (statement -> expression .)
    (               reduce using rule 14 (statement -> expression .)
    FOR             reduce using rule 14 (statement -> expression .)
    WHILE           reduce using rule 14 (statement -> expression .)
    $end            reduce using rule 14 (statement -> expression .)
    }               reduce using rule 14 (statement -> expression .)
    POWER           shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29
    %               shift and go to state 30
    ELLIPSIS        shift and go to state 31
    DOUBLE_EQ       shift and go to state 32
    NOT_EQ          shift and go to state 33
    >               shift and go to state 34
    <               shift and go to state 35
    LESS_EQ         shift and go to state 36
    GREATER_EQ      shift and go to state 37

  ! -               [ reduce using rule 14 (statement -> expression .) ]


state 7

    (15) statement -> for .

    IF              reduce using rule 15 (statement -> for .)
    LET             reduce using rule 15 (statement -> for .)
    VAR             reduce using rule 15 (statement -> for .)
    NAME            reduce using rule 15 (statement -> for .)
    PRINT           reduce using rule 15 (statement -> for .)
    READLINE        reduce using rule 15 (statement -> for .)
    MIN             reduce using rule 15 (statement -> for .)
    MAX             reduce using rule 15 (statement -> for .)
    ABS             reduce using rule 15 (statement -> for .)
    -               reduce using rule 15 (statement -> for .)
    NUMBER          reduce using rule 15 (statement -> for .)
    DQ_STRING       reduce using rule 15 (statement -> for .)
    SQ_STRING       reduce using rule 15 (statement -> for .)
    (               reduce using rule 15 (statement -> for .)
    FOR             reduce using rule 15 (statement -> for .)
    WHILE           reduce using rule 15 (statement -> for .)
    $end            reduce using rule 15 (statement -> for .)
    }               reduce using rule 15 (statement -> for .)


state 8

    (41) statement -> IF . expression { statement_block }
    (42) statement -> IF . expression { statement } ELSE { statement_block }
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 38

state 9

    (7) assign -> LET . NAME = expression

    NAME            shift and go to state 40


state 10

    (9) assign -> NAME . = expression
    (31) expression -> NAME .

    =               shift and go to state 41
    POWER           reduce using rule 31 (expression -> NAME .)
    +               reduce using rule 31 (expression -> NAME .)
    -               reduce using rule 31 (expression -> NAME .)
    *               reduce using rule 31 (expression -> NAME .)
    /               reduce using rule 31 (expression -> NAME .)
    %               reduce using rule 31 (expression -> NAME .)
    ELLIPSIS        reduce using rule 31 (expression -> NAME .)
    DOUBLE_EQ       reduce using rule 31 (expression -> NAME .)
    NOT_EQ          reduce using rule 31 (expression -> NAME .)
    >               reduce using rule 31 (expression -> NAME .)
    <               reduce using rule 31 (expression -> NAME .)
    LESS_EQ         reduce using rule 31 (expression -> NAME .)
    GREATER_EQ      reduce using rule 31 (expression -> NAME .)
    IF              reduce using rule 31 (expression -> NAME .)
    LET             reduce using rule 31 (expression -> NAME .)
    VAR             reduce using rule 31 (expression -> NAME .)
    NAME            reduce using rule 31 (expression -> NAME .)
    PRINT           reduce using rule 31 (expression -> NAME .)
    READLINE        reduce using rule 31 (expression -> NAME .)
    MIN             reduce using rule 31 (expression -> NAME .)
    MAX             reduce using rule 31 (expression -> NAME .)
    ABS             reduce using rule 31 (expression -> NAME .)
    NUMBER          reduce using rule 31 (expression -> NAME .)
    DQ_STRING       reduce using rule 31 (expression -> NAME .)
    SQ_STRING       reduce using rule 31 (expression -> NAME .)
    (               reduce using rule 31 (expression -> NAME .)
    FOR             reduce using rule 31 (expression -> NAME .)
    WHILE           reduce using rule 31 (expression -> NAME .)
    $end            reduce using rule 31 (expression -> NAME .)
    }               reduce using rule 31 (expression -> NAME .)


state 11

    (8) assign -> VAR . NAME = expression

    NAME            shift and go to state 42


state 12

    (16) print -> PRINT . ( print_expression_list )
    (17) print -> PRINT . ( expression )

    (               shift and go to state 43


state 13

    (34) expression -> ( . expression )
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 44

state 14

    (18) expression -> READLINE . ( )

    (               shift and go to state 45


state 15

    (19) expression -> MIN . ( expression , expression )

    (               shift and go to state 46


state 16

    (20) expression -> MAX . ( expression , expression )

    (               shift and go to state 47


state 17

    (21) expression -> ABS . ( expression )

    (               shift and go to state 48


state 18

    (23) expression -> - . expression
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 49

state 19

    (30) expression -> NUMBER .

    POWER           reduce using rule 30 (expression -> NUMBER .)
    +               reduce using rule 30 (expression -> NUMBER .)
    -               reduce using rule 30 (expression -> NUMBER .)
    *               reduce using rule 30 (expression -> NUMBER .)
    /               reduce using rule 30 (expression -> NUMBER .)
    %               reduce using rule 30 (expression -> NUMBER .)
    ELLIPSIS        reduce using rule 30 (expression -> NUMBER .)
    DOUBLE_EQ       reduce using rule 30 (expression -> NUMBER .)
    NOT_EQ          reduce using rule 30 (expression -> NUMBER .)
    >               reduce using rule 30 (expression -> NUMBER .)
    <               reduce using rule 30 (expression -> NUMBER .)
    LESS_EQ         reduce using rule 30 (expression -> NUMBER .)
    GREATER_EQ      reduce using rule 30 (expression -> NUMBER .)
    IF              reduce using rule 30 (expression -> NUMBER .)
    LET             reduce using rule 30 (expression -> NUMBER .)
    VAR             reduce using rule 30 (expression -> NUMBER .)
    NAME            reduce using rule 30 (expression -> NUMBER .)
    PRINT           reduce using rule 30 (expression -> NUMBER .)
    READLINE        reduce using rule 30 (expression -> NUMBER .)
    MIN             reduce using rule 30 (expression -> NUMBER .)
    MAX             reduce using rule 30 (expression -> NUMBER .)
    ABS             reduce using rule 30 (expression -> NUMBER .)
    NUMBER          reduce using rule 30 (expression -> NUMBER .)
    DQ_STRING       reduce using rule 30 (expression -> NUMBER .)
    SQ_STRING       reduce using rule 30 (expression -> NUMBER .)
    (               reduce using rule 30 (expression -> NUMBER .)
    FOR             reduce using rule 30 (expression -> NUMBER .)
    WHILE           reduce using rule 30 (expression -> NUMBER .)
    $end            reduce using rule 30 (expression -> NUMBER .)
    {               reduce using rule 30 (expression -> NUMBER .)
    )               reduce using rule 30 (expression -> NUMBER .)
    }               reduce using rule 30 (expression -> NUMBER .)
    ,               reduce using rule 30 (expression -> NUMBER .)


state 20

    (32) expression -> DQ_STRING .

    POWER           reduce using rule 32 (expression -> DQ_STRING .)
    +               reduce using rule 32 (expression -> DQ_STRING .)
    -               reduce using rule 32 (expression -> DQ_STRING .)
    *               reduce using rule 32 (expression -> DQ_STRING .)
    /               reduce using rule 32 (expression -> DQ_STRING .)
    %               reduce using rule 32 (expression -> DQ_STRING .)
    ELLIPSIS        reduce using rule 32 (expression -> DQ_STRING .)
    DOUBLE_EQ       reduce using rule 32 (expression -> DQ_STRING .)
    NOT_EQ          reduce using rule 32 (expression -> DQ_STRING .)
    >               reduce using rule 32 (expression -> DQ_STRING .)
    <               reduce using rule 32 (expression -> DQ_STRING .)
    LESS_EQ         reduce using rule 32 (expression -> DQ_STRING .)
    GREATER_EQ      reduce using rule 32 (expression -> DQ_STRING .)
    IF              reduce using rule 32 (expression -> DQ_STRING .)
    LET             reduce using rule 32 (expression -> DQ_STRING .)
    VAR             reduce using rule 32 (expression -> DQ_STRING .)
    NAME            reduce using rule 32 (expression -> DQ_STRING .)
    PRINT           reduce using rule 32 (expression -> DQ_STRING .)
    READLINE        reduce using rule 32 (expression -> DQ_STRING .)
    MIN             reduce using rule 32 (expression -> DQ_STRING .)
    MAX             reduce using rule 32 (expression -> DQ_STRING .)
    ABS             reduce using rule 32 (expression -> DQ_STRING .)
    NUMBER          reduce using rule 32 (expression -> DQ_STRING .)
    DQ_STRING       reduce using rule 32 (expression -> DQ_STRING .)
    SQ_STRING       reduce using rule 32 (expression -> DQ_STRING .)
    (               reduce using rule 32 (expression -> DQ_STRING .)
    FOR             reduce using rule 32 (expression -> DQ_STRING .)
    WHILE           reduce using rule 32 (expression -> DQ_STRING .)
    $end            reduce using rule 32 (expression -> DQ_STRING .)
    {               reduce using rule 32 (expression -> DQ_STRING .)
    )               reduce using rule 32 (expression -> DQ_STRING .)
    }               reduce using rule 32 (expression -> DQ_STRING .)
    ,               reduce using rule 32 (expression -> DQ_STRING .)


state 21

    (33) expression -> SQ_STRING .

    POWER           reduce using rule 33 (expression -> SQ_STRING .)
    +               reduce using rule 33 (expression -> SQ_STRING .)
    -               reduce using rule 33 (expression -> SQ_STRING .)
    *               reduce using rule 33 (expression -> SQ_STRING .)
    /               reduce using rule 33 (expression -> SQ_STRING .)
    %               reduce using rule 33 (expression -> SQ_STRING .)
    ELLIPSIS        reduce using rule 33 (expression -> SQ_STRING .)
    DOUBLE_EQ       reduce using rule 33 (expression -> SQ_STRING .)
    NOT_EQ          reduce using rule 33 (expression -> SQ_STRING .)
    >               reduce using rule 33 (expression -> SQ_STRING .)
    <               reduce using rule 33 (expression -> SQ_STRING .)
    LESS_EQ         reduce using rule 33 (expression -> SQ_STRING .)
    GREATER_EQ      reduce using rule 33 (expression -> SQ_STRING .)
    IF              reduce using rule 33 (expression -> SQ_STRING .)
    LET             reduce using rule 33 (expression -> SQ_STRING .)
    VAR             reduce using rule 33 (expression -> SQ_STRING .)
    NAME            reduce using rule 33 (expression -> SQ_STRING .)
    PRINT           reduce using rule 33 (expression -> SQ_STRING .)
    READLINE        reduce using rule 33 (expression -> SQ_STRING .)
    MIN             reduce using rule 33 (expression -> SQ_STRING .)
    MAX             reduce using rule 33 (expression -> SQ_STRING .)
    ABS             reduce using rule 33 (expression -> SQ_STRING .)
    NUMBER          reduce using rule 33 (expression -> SQ_STRING .)
    DQ_STRING       reduce using rule 33 (expression -> SQ_STRING .)
    SQ_STRING       reduce using rule 33 (expression -> SQ_STRING .)
    (               reduce using rule 33 (expression -> SQ_STRING .)
    FOR             reduce using rule 33 (expression -> SQ_STRING .)
    WHILE           reduce using rule 33 (expression -> SQ_STRING .)
    $end            reduce using rule 33 (expression -> SQ_STRING .)
    {               reduce using rule 33 (expression -> SQ_STRING .)
    )               reduce using rule 33 (expression -> SQ_STRING .)
    }               reduce using rule 33 (expression -> SQ_STRING .)
    ,               reduce using rule 33 (expression -> SQ_STRING .)


state 22

    (4) for -> FOR . for_assign IN expression statement_block
    (11) for_assign -> . NAME

    NAME            shift and go to state 51

    for_assign                     shift and go to state 50

state 23

    (5) for -> WHILE . expression statement_block
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 52

state 24

    (2) statement_list -> statement_list statement .

    IF              reduce using rule 2 (statement_list -> statement_list statement .)
    LET             reduce using rule 2 (statement_list -> statement_list statement .)
    VAR             reduce using rule 2 (statement_list -> statement_list statement .)
    NAME            reduce using rule 2 (statement_list -> statement_list statement .)
    PRINT           reduce using rule 2 (statement_list -> statement_list statement .)
    READLINE        reduce using rule 2 (statement_list -> statement_list statement .)
    MIN             reduce using rule 2 (statement_list -> statement_list statement .)
    MAX             reduce using rule 2 (statement_list -> statement_list statement .)
    ABS             reduce using rule 2 (statement_list -> statement_list statement .)
    -               reduce using rule 2 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 2 (statement_list -> statement_list statement .)
    DQ_STRING       reduce using rule 2 (statement_list -> statement_list statement .)
    SQ_STRING       reduce using rule 2 (statement_list -> statement_list statement .)
    (               reduce using rule 2 (statement_list -> statement_list statement .)
    FOR             reduce using rule 2 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)
    }               reduce using rule 2 (statement_list -> statement_list statement .)


state 25

    (22) expression -> expression POWER . expression
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 53

state 26

    (24) expression -> expression + . expression
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 54

state 27

    (25) expression -> expression - . expression
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 55

state 28

    (26) expression -> expression * . expression
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 56

state 29

    (27) expression -> expression / . expression
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 57

state 30

    (28) expression -> expression % . expression
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 58

state 31

    (29) expression -> expression ELLIPSIS . expression
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 59

state 32

    (35) expression -> expression DOUBLE_EQ . expression
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 60

state 33

    (36) expression -> expression NOT_EQ . expression
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 61

state 34

    (37) expression -> expression > . expression
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 62

state 35

    (38) expression -> expression < . expression
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 63

state 36

    (39) expression -> expression LESS_EQ . expression
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 64

state 37

    (40) expression -> expression GREATER_EQ . expression
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 65

state 38

    (41) statement -> IF expression . { statement_block }
    (42) statement -> IF expression . { statement } ELSE { statement_block }
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

    {               shift and go to state 66
    POWER           shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29
    %               shift and go to state 30
    ELLIPSIS        shift and go to state 31
    DOUBLE_EQ       shift and go to state 32
    NOT_EQ          shift and go to state 33
    >               shift and go to state 34
    <               shift and go to state 35
    LESS_EQ         shift and go to state 36
    GREATER_EQ      shift and go to state 37


state 39

    (31) expression -> NAME .

    {               reduce using rule 31 (expression -> NAME .)
    POWER           reduce using rule 31 (expression -> NAME .)
    +               reduce using rule 31 (expression -> NAME .)
    -               reduce using rule 31 (expression -> NAME .)
    *               reduce using rule 31 (expression -> NAME .)
    /               reduce using rule 31 (expression -> NAME .)
    %               reduce using rule 31 (expression -> NAME .)
    ELLIPSIS        reduce using rule 31 (expression -> NAME .)
    DOUBLE_EQ       reduce using rule 31 (expression -> NAME .)
    NOT_EQ          reduce using rule 31 (expression -> NAME .)
    >               reduce using rule 31 (expression -> NAME .)
    <               reduce using rule 31 (expression -> NAME .)
    LESS_EQ         reduce using rule 31 (expression -> NAME .)
    GREATER_EQ      reduce using rule 31 (expression -> NAME .)
    )               reduce using rule 31 (expression -> NAME .)
    IF              reduce using rule 31 (expression -> NAME .)
    LET             reduce using rule 31 (expression -> NAME .)
    VAR             reduce using rule 31 (expression -> NAME .)
    NAME            reduce using rule 31 (expression -> NAME .)
    PRINT           reduce using rule 31 (expression -> NAME .)
    READLINE        reduce using rule 31 (expression -> NAME .)
    MIN             reduce using rule 31 (expression -> NAME .)
    MAX             reduce using rule 31 (expression -> NAME .)
    ABS             reduce using rule 31 (expression -> NAME .)
    NUMBER          reduce using rule 31 (expression -> NAME .)
    DQ_STRING       reduce using rule 31 (expression -> NAME .)
    SQ_STRING       reduce using rule 31 (expression -> NAME .)
    (               reduce using rule 31 (expression -> NAME .)
    FOR             reduce using rule 31 (expression -> NAME .)
    WHILE           reduce using rule 31 (expression -> NAME .)
    $end            reduce using rule 31 (expression -> NAME .)
    }               reduce using rule 31 (expression -> NAME .)
    ,               reduce using rule 31 (expression -> NAME .)


state 40

    (7) assign -> LET NAME . = expression

    =               shift and go to state 67


state 41

    (9) assign -> NAME = . expression
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 68

state 42

    (8) assign -> VAR NAME . = expression

    =               shift and go to state 69


state 43

    (16) print -> PRINT ( . print_expression_list )
    (17) print -> PRINT ( . expression )
    (43) print_expression_list -> .
    (44) print_expression_list -> . print_expression_list print_expression
    (45) print_expression_list -> . print_expression
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression
    (46) print_expression -> . expression ,

  ! shift/reduce conflict for READLINE resolved as shift
  ! shift/reduce conflict for MIN resolved as shift
  ! shift/reduce conflict for MAX resolved as shift
  ! shift/reduce conflict for ABS resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for NAME resolved as shift
  ! shift/reduce conflict for DQ_STRING resolved as shift
  ! shift/reduce conflict for SQ_STRING resolved as shift
  ! shift/reduce conflict for ( resolved as shift
    )               reduce using rule 43 (print_expression_list -> .)
    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

  ! READLINE        [ reduce using rule 43 (print_expression_list -> .) ]
  ! MIN             [ reduce using rule 43 (print_expression_list -> .) ]
  ! MAX             [ reduce using rule 43 (print_expression_list -> .) ]
  ! ABS             [ reduce using rule 43 (print_expression_list -> .) ]
  ! -               [ reduce using rule 43 (print_expression_list -> .) ]
  ! NUMBER          [ reduce using rule 43 (print_expression_list -> .) ]
  ! NAME            [ reduce using rule 43 (print_expression_list -> .) ]
  ! DQ_STRING       [ reduce using rule 43 (print_expression_list -> .) ]
  ! SQ_STRING       [ reduce using rule 43 (print_expression_list -> .) ]
  ! (               [ reduce using rule 43 (print_expression_list -> .) ]

    print_expression_list          shift and go to state 70
    expression                     shift and go to state 71
    print_expression               shift and go to state 72

state 44

    (34) expression -> ( expression . )
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

    )               shift and go to state 73
    POWER           shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29
    %               shift and go to state 30
    ELLIPSIS        shift and go to state 31
    DOUBLE_EQ       shift and go to state 32
    NOT_EQ          shift and go to state 33
    >               shift and go to state 34
    <               shift and go to state 35
    LESS_EQ         shift and go to state 36
    GREATER_EQ      shift and go to state 37


state 45

    (18) expression -> READLINE ( . )

    )               shift and go to state 74


state 46

    (19) expression -> MIN ( . expression , expression )
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 75

state 47

    (20) expression -> MAX ( . expression , expression )
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 76

state 48

    (21) expression -> ABS ( . expression )
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 77

state 49

    (23) expression -> - expression .
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

    POWER           reduce using rule 23 (expression -> - expression .)
    +               reduce using rule 23 (expression -> - expression .)
    -               reduce using rule 23 (expression -> - expression .)
    *               reduce using rule 23 (expression -> - expression .)
    /               reduce using rule 23 (expression -> - expression .)
    %               reduce using rule 23 (expression -> - expression .)
    ELLIPSIS        reduce using rule 23 (expression -> - expression .)
    DOUBLE_EQ       reduce using rule 23 (expression -> - expression .)
    NOT_EQ          reduce using rule 23 (expression -> - expression .)
    >               reduce using rule 23 (expression -> - expression .)
    <               reduce using rule 23 (expression -> - expression .)
    LESS_EQ         reduce using rule 23 (expression -> - expression .)
    GREATER_EQ      reduce using rule 23 (expression -> - expression .)
    IF              reduce using rule 23 (expression -> - expression .)
    LET             reduce using rule 23 (expression -> - expression .)
    VAR             reduce using rule 23 (expression -> - expression .)
    NAME            reduce using rule 23 (expression -> - expression .)
    PRINT           reduce using rule 23 (expression -> - expression .)
    READLINE        reduce using rule 23 (expression -> - expression .)
    MIN             reduce using rule 23 (expression -> - expression .)
    MAX             reduce using rule 23 (expression -> - expression .)
    ABS             reduce using rule 23 (expression -> - expression .)
    NUMBER          reduce using rule 23 (expression -> - expression .)
    DQ_STRING       reduce using rule 23 (expression -> - expression .)
    SQ_STRING       reduce using rule 23 (expression -> - expression .)
    (               reduce using rule 23 (expression -> - expression .)
    FOR             reduce using rule 23 (expression -> - expression .)
    WHILE           reduce using rule 23 (expression -> - expression .)
    $end            reduce using rule 23 (expression -> - expression .)
    {               reduce using rule 23 (expression -> - expression .)
    )               reduce using rule 23 (expression -> - expression .)
    }               reduce using rule 23 (expression -> - expression .)
    ,               reduce using rule 23 (expression -> - expression .)

  ! POWER           [ shift and go to state 25 ]
  ! +               [ shift and go to state 26 ]
  ! -               [ shift and go to state 27 ]
  ! *               [ shift and go to state 28 ]
  ! /               [ shift and go to state 29 ]
  ! %               [ shift and go to state 30 ]
  ! ELLIPSIS        [ shift and go to state 31 ]
  ! DOUBLE_EQ       [ shift and go to state 32 ]
  ! NOT_EQ          [ shift and go to state 33 ]
  ! >               [ shift and go to state 34 ]
  ! <               [ shift and go to state 35 ]
  ! LESS_EQ         [ shift and go to state 36 ]
  ! GREATER_EQ      [ shift and go to state 37 ]


state 50

    (4) for -> FOR for_assign . IN expression statement_block

    IN              shift and go to state 78


state 51

    (11) for_assign -> NAME .

    IN              reduce using rule 11 (for_assign -> NAME .)


state 52

    (5) for -> WHILE expression . statement_block
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression
    (10) statement_block -> . { statement_list }
    (12) statement_block -> . statement
    (6) statement -> . assign
    (13) statement -> . print
    (14) statement -> . expression
    (15) statement -> . for
    (41) statement -> . IF expression { statement_block }
    (42) statement -> . IF expression { statement } ELSE { statement_block }
    (7) assign -> . LET NAME = expression
    (8) assign -> . VAR NAME = expression
    (9) assign -> . NAME = expression
    (16) print -> . PRINT ( print_expression_list )
    (17) print -> . PRINT ( expression )
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression
    (4) for -> . FOR for_assign IN expression statement_block
    (5) for -> . WHILE expression statement_block

    POWER           shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 80
    *               shift and go to state 28
    /               shift and go to state 29
    %               shift and go to state 30
    ELLIPSIS        shift and go to state 31
    DOUBLE_EQ       shift and go to state 32
    NOT_EQ          shift and go to state 33
    >               shift and go to state 34
    <               shift and go to state 35
    LESS_EQ         shift and go to state 36
    GREATER_EQ      shift and go to state 37
    {               shift and go to state 81
    IF              shift and go to state 8
    LET             shift and go to state 9
    VAR             shift and go to state 11
    NAME            shift and go to state 10
    PRINT           shift and go to state 12
    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    NUMBER          shift and go to state 19
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13
    FOR             shift and go to state 22
    WHILE           shift and go to state 23

    expression                     shift and go to state 6
    statement_block                shift and go to state 79
    statement                      shift and go to state 82
    assign                         shift and go to state 4
    print                          shift and go to state 5
    for                            shift and go to state 7

state 53

    (22) expression -> expression POWER expression .
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for ELLIPSIS resolved as shift
  ! shift/reduce conflict for DOUBLE_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
    IF              reduce using rule 22 (expression -> expression POWER expression .)
    LET             reduce using rule 22 (expression -> expression POWER expression .)
    VAR             reduce using rule 22 (expression -> expression POWER expression .)
    NAME            reduce using rule 22 (expression -> expression POWER expression .)
    PRINT           reduce using rule 22 (expression -> expression POWER expression .)
    READLINE        reduce using rule 22 (expression -> expression POWER expression .)
    MIN             reduce using rule 22 (expression -> expression POWER expression .)
    MAX             reduce using rule 22 (expression -> expression POWER expression .)
    ABS             reduce using rule 22 (expression -> expression POWER expression .)
    NUMBER          reduce using rule 22 (expression -> expression POWER expression .)
    DQ_STRING       reduce using rule 22 (expression -> expression POWER expression .)
    SQ_STRING       reduce using rule 22 (expression -> expression POWER expression .)
    (               reduce using rule 22 (expression -> expression POWER expression .)
    FOR             reduce using rule 22 (expression -> expression POWER expression .)
    WHILE           reduce using rule 22 (expression -> expression POWER expression .)
    $end            reduce using rule 22 (expression -> expression POWER expression .)
    {               reduce using rule 22 (expression -> expression POWER expression .)
    )               reduce using rule 22 (expression -> expression POWER expression .)
    }               reduce using rule 22 (expression -> expression POWER expression .)
    ,               reduce using rule 22 (expression -> expression POWER expression .)
    POWER           shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29
    %               shift and go to state 30
    ELLIPSIS        shift and go to state 31
    DOUBLE_EQ       shift and go to state 32
    NOT_EQ          shift and go to state 33
    >               shift and go to state 34
    <               shift and go to state 35
    LESS_EQ         shift and go to state 36
    GREATER_EQ      shift and go to state 37

  ! POWER           [ reduce using rule 22 (expression -> expression POWER expression .) ]
  ! +               [ reduce using rule 22 (expression -> expression POWER expression .) ]
  ! -               [ reduce using rule 22 (expression -> expression POWER expression .) ]
  ! *               [ reduce using rule 22 (expression -> expression POWER expression .) ]
  ! /               [ reduce using rule 22 (expression -> expression POWER expression .) ]
  ! %               [ reduce using rule 22 (expression -> expression POWER expression .) ]
  ! ELLIPSIS        [ reduce using rule 22 (expression -> expression POWER expression .) ]
  ! DOUBLE_EQ       [ reduce using rule 22 (expression -> expression POWER expression .) ]
  ! NOT_EQ          [ reduce using rule 22 (expression -> expression POWER expression .) ]
  ! >               [ reduce using rule 22 (expression -> expression POWER expression .) ]
  ! <               [ reduce using rule 22 (expression -> expression POWER expression .) ]
  ! LESS_EQ         [ reduce using rule 22 (expression -> expression POWER expression .) ]
  ! GREATER_EQ      [ reduce using rule 22 (expression -> expression POWER expression .) ]


state 54

    (24) expression -> expression + expression .
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

    POWER           reduce using rule 24 (expression -> expression + expression .)
    +               reduce using rule 24 (expression -> expression + expression .)
    -               reduce using rule 24 (expression -> expression + expression .)
    %               reduce using rule 24 (expression -> expression + expression .)
    DOUBLE_EQ       reduce using rule 24 (expression -> expression + expression .)
    NOT_EQ          reduce using rule 24 (expression -> expression + expression .)
    >               reduce using rule 24 (expression -> expression + expression .)
    <               reduce using rule 24 (expression -> expression + expression .)
    LESS_EQ         reduce using rule 24 (expression -> expression + expression .)
    GREATER_EQ      reduce using rule 24 (expression -> expression + expression .)
    IF              reduce using rule 24 (expression -> expression + expression .)
    LET             reduce using rule 24 (expression -> expression + expression .)
    VAR             reduce using rule 24 (expression -> expression + expression .)
    NAME            reduce using rule 24 (expression -> expression + expression .)
    PRINT           reduce using rule 24 (expression -> expression + expression .)
    READLINE        reduce using rule 24 (expression -> expression + expression .)
    MIN             reduce using rule 24 (expression -> expression + expression .)
    MAX             reduce using rule 24 (expression -> expression + expression .)
    ABS             reduce using rule 24 (expression -> expression + expression .)
    NUMBER          reduce using rule 24 (expression -> expression + expression .)
    DQ_STRING       reduce using rule 24 (expression -> expression + expression .)
    SQ_STRING       reduce using rule 24 (expression -> expression + expression .)
    (               reduce using rule 24 (expression -> expression + expression .)
    FOR             reduce using rule 24 (expression -> expression + expression .)
    WHILE           reduce using rule 24 (expression -> expression + expression .)
    $end            reduce using rule 24 (expression -> expression + expression .)
    {               reduce using rule 24 (expression -> expression + expression .)
    )               reduce using rule 24 (expression -> expression + expression .)
    }               reduce using rule 24 (expression -> expression + expression .)
    ,               reduce using rule 24 (expression -> expression + expression .)
    *               shift and go to state 28
    /               shift and go to state 29
    ELLIPSIS        shift and go to state 31

  ! *               [ reduce using rule 24 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 24 (expression -> expression + expression .) ]
  ! ELLIPSIS        [ reduce using rule 24 (expression -> expression + expression .) ]
  ! POWER           [ shift and go to state 25 ]
  ! +               [ shift and go to state 26 ]
  ! -               [ shift and go to state 27 ]
  ! %               [ shift and go to state 30 ]
  ! DOUBLE_EQ       [ shift and go to state 32 ]
  ! NOT_EQ          [ shift and go to state 33 ]
  ! >               [ shift and go to state 34 ]
  ! <               [ shift and go to state 35 ]
  ! LESS_EQ         [ shift and go to state 36 ]
  ! GREATER_EQ      [ shift and go to state 37 ]


state 55

    (25) expression -> expression - expression .
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

    POWER           reduce using rule 25 (expression -> expression - expression .)
    +               reduce using rule 25 (expression -> expression - expression .)
    -               reduce using rule 25 (expression -> expression - expression .)
    %               reduce using rule 25 (expression -> expression - expression .)
    DOUBLE_EQ       reduce using rule 25 (expression -> expression - expression .)
    NOT_EQ          reduce using rule 25 (expression -> expression - expression .)
    >               reduce using rule 25 (expression -> expression - expression .)
    <               reduce using rule 25 (expression -> expression - expression .)
    LESS_EQ         reduce using rule 25 (expression -> expression - expression .)
    GREATER_EQ      reduce using rule 25 (expression -> expression - expression .)
    IF              reduce using rule 25 (expression -> expression - expression .)
    LET             reduce using rule 25 (expression -> expression - expression .)
    VAR             reduce using rule 25 (expression -> expression - expression .)
    NAME            reduce using rule 25 (expression -> expression - expression .)
    PRINT           reduce using rule 25 (expression -> expression - expression .)
    READLINE        reduce using rule 25 (expression -> expression - expression .)
    MIN             reduce using rule 25 (expression -> expression - expression .)
    MAX             reduce using rule 25 (expression -> expression - expression .)
    ABS             reduce using rule 25 (expression -> expression - expression .)
    NUMBER          reduce using rule 25 (expression -> expression - expression .)
    DQ_STRING       reduce using rule 25 (expression -> expression - expression .)
    SQ_STRING       reduce using rule 25 (expression -> expression - expression .)
    (               reduce using rule 25 (expression -> expression - expression .)
    FOR             reduce using rule 25 (expression -> expression - expression .)
    WHILE           reduce using rule 25 (expression -> expression - expression .)
    $end            reduce using rule 25 (expression -> expression - expression .)
    {               reduce using rule 25 (expression -> expression - expression .)
    )               reduce using rule 25 (expression -> expression - expression .)
    }               reduce using rule 25 (expression -> expression - expression .)
    ,               reduce using rule 25 (expression -> expression - expression .)
    *               shift and go to state 28
    /               shift and go to state 29
    ELLIPSIS        shift and go to state 31

  ! *               [ reduce using rule 25 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 25 (expression -> expression - expression .) ]
  ! ELLIPSIS        [ reduce using rule 25 (expression -> expression - expression .) ]
  ! POWER           [ shift and go to state 25 ]
  ! +               [ shift and go to state 26 ]
  ! -               [ shift and go to state 27 ]
  ! %               [ shift and go to state 30 ]
  ! DOUBLE_EQ       [ shift and go to state 32 ]
  ! NOT_EQ          [ shift and go to state 33 ]
  ! >               [ shift and go to state 34 ]
  ! <               [ shift and go to state 35 ]
  ! LESS_EQ         [ shift and go to state 36 ]
  ! GREATER_EQ      [ shift and go to state 37 ]


state 56

    (26) expression -> expression * expression .
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

    POWER           reduce using rule 26 (expression -> expression * expression .)
    +               reduce using rule 26 (expression -> expression * expression .)
    -               reduce using rule 26 (expression -> expression * expression .)
    *               reduce using rule 26 (expression -> expression * expression .)
    /               reduce using rule 26 (expression -> expression * expression .)
    %               reduce using rule 26 (expression -> expression * expression .)
    ELLIPSIS        reduce using rule 26 (expression -> expression * expression .)
    DOUBLE_EQ       reduce using rule 26 (expression -> expression * expression .)
    NOT_EQ          reduce using rule 26 (expression -> expression * expression .)
    >               reduce using rule 26 (expression -> expression * expression .)
    <               reduce using rule 26 (expression -> expression * expression .)
    LESS_EQ         reduce using rule 26 (expression -> expression * expression .)
    GREATER_EQ      reduce using rule 26 (expression -> expression * expression .)
    IF              reduce using rule 26 (expression -> expression * expression .)
    LET             reduce using rule 26 (expression -> expression * expression .)
    VAR             reduce using rule 26 (expression -> expression * expression .)
    NAME            reduce using rule 26 (expression -> expression * expression .)
    PRINT           reduce using rule 26 (expression -> expression * expression .)
    READLINE        reduce using rule 26 (expression -> expression * expression .)
    MIN             reduce using rule 26 (expression -> expression * expression .)
    MAX             reduce using rule 26 (expression -> expression * expression .)
    ABS             reduce using rule 26 (expression -> expression * expression .)
    NUMBER          reduce using rule 26 (expression -> expression * expression .)
    DQ_STRING       reduce using rule 26 (expression -> expression * expression .)
    SQ_STRING       reduce using rule 26 (expression -> expression * expression .)
    (               reduce using rule 26 (expression -> expression * expression .)
    FOR             reduce using rule 26 (expression -> expression * expression .)
    WHILE           reduce using rule 26 (expression -> expression * expression .)
    $end            reduce using rule 26 (expression -> expression * expression .)
    {               reduce using rule 26 (expression -> expression * expression .)
    )               reduce using rule 26 (expression -> expression * expression .)
    }               reduce using rule 26 (expression -> expression * expression .)
    ,               reduce using rule 26 (expression -> expression * expression .)

  ! POWER           [ shift and go to state 25 ]
  ! +               [ shift and go to state 26 ]
  ! -               [ shift and go to state 27 ]
  ! *               [ shift and go to state 28 ]
  ! /               [ shift and go to state 29 ]
  ! %               [ shift and go to state 30 ]
  ! ELLIPSIS        [ shift and go to state 31 ]
  ! DOUBLE_EQ       [ shift and go to state 32 ]
  ! NOT_EQ          [ shift and go to state 33 ]
  ! >               [ shift and go to state 34 ]
  ! <               [ shift and go to state 35 ]
  ! LESS_EQ         [ shift and go to state 36 ]
  ! GREATER_EQ      [ shift and go to state 37 ]


state 57

    (27) expression -> expression / expression .
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

    POWER           reduce using rule 27 (expression -> expression / expression .)
    +               reduce using rule 27 (expression -> expression / expression .)
    -               reduce using rule 27 (expression -> expression / expression .)
    *               reduce using rule 27 (expression -> expression / expression .)
    /               reduce using rule 27 (expression -> expression / expression .)
    %               reduce using rule 27 (expression -> expression / expression .)
    ELLIPSIS        reduce using rule 27 (expression -> expression / expression .)
    DOUBLE_EQ       reduce using rule 27 (expression -> expression / expression .)
    NOT_EQ          reduce using rule 27 (expression -> expression / expression .)
    >               reduce using rule 27 (expression -> expression / expression .)
    <               reduce using rule 27 (expression -> expression / expression .)
    LESS_EQ         reduce using rule 27 (expression -> expression / expression .)
    GREATER_EQ      reduce using rule 27 (expression -> expression / expression .)
    IF              reduce using rule 27 (expression -> expression / expression .)
    LET             reduce using rule 27 (expression -> expression / expression .)
    VAR             reduce using rule 27 (expression -> expression / expression .)
    NAME            reduce using rule 27 (expression -> expression / expression .)
    PRINT           reduce using rule 27 (expression -> expression / expression .)
    READLINE        reduce using rule 27 (expression -> expression / expression .)
    MIN             reduce using rule 27 (expression -> expression / expression .)
    MAX             reduce using rule 27 (expression -> expression / expression .)
    ABS             reduce using rule 27 (expression -> expression / expression .)
    NUMBER          reduce using rule 27 (expression -> expression / expression .)
    DQ_STRING       reduce using rule 27 (expression -> expression / expression .)
    SQ_STRING       reduce using rule 27 (expression -> expression / expression .)
    (               reduce using rule 27 (expression -> expression / expression .)
    FOR             reduce using rule 27 (expression -> expression / expression .)
    WHILE           reduce using rule 27 (expression -> expression / expression .)
    $end            reduce using rule 27 (expression -> expression / expression .)
    {               reduce using rule 27 (expression -> expression / expression .)
    )               reduce using rule 27 (expression -> expression / expression .)
    }               reduce using rule 27 (expression -> expression / expression .)
    ,               reduce using rule 27 (expression -> expression / expression .)

  ! POWER           [ shift and go to state 25 ]
  ! +               [ shift and go to state 26 ]
  ! -               [ shift and go to state 27 ]
  ! *               [ shift and go to state 28 ]
  ! /               [ shift and go to state 29 ]
  ! %               [ shift and go to state 30 ]
  ! ELLIPSIS        [ shift and go to state 31 ]
  ! DOUBLE_EQ       [ shift and go to state 32 ]
  ! NOT_EQ          [ shift and go to state 33 ]
  ! >               [ shift and go to state 34 ]
  ! <               [ shift and go to state 35 ]
  ! LESS_EQ         [ shift and go to state 36 ]
  ! GREATER_EQ      [ shift and go to state 37 ]


state 58

    (28) expression -> expression % expression .
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for ELLIPSIS resolved as shift
  ! shift/reduce conflict for DOUBLE_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
    IF              reduce using rule 28 (expression -> expression % expression .)
    LET             reduce using rule 28 (expression -> expression % expression .)
    VAR             reduce using rule 28 (expression -> expression % expression .)
    NAME            reduce using rule 28 (expression -> expression % expression .)
    PRINT           reduce using rule 28 (expression -> expression % expression .)
    READLINE        reduce using rule 28 (expression -> expression % expression .)
    MIN             reduce using rule 28 (expression -> expression % expression .)
    MAX             reduce using rule 28 (expression -> expression % expression .)
    ABS             reduce using rule 28 (expression -> expression % expression .)
    NUMBER          reduce using rule 28 (expression -> expression % expression .)
    DQ_STRING       reduce using rule 28 (expression -> expression % expression .)
    SQ_STRING       reduce using rule 28 (expression -> expression % expression .)
    (               reduce using rule 28 (expression -> expression % expression .)
    FOR             reduce using rule 28 (expression -> expression % expression .)
    WHILE           reduce using rule 28 (expression -> expression % expression .)
    $end            reduce using rule 28 (expression -> expression % expression .)
    {               reduce using rule 28 (expression -> expression % expression .)
    )               reduce using rule 28 (expression -> expression % expression .)
    }               reduce using rule 28 (expression -> expression % expression .)
    ,               reduce using rule 28 (expression -> expression % expression .)
    POWER           shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29
    %               shift and go to state 30
    ELLIPSIS        shift and go to state 31
    DOUBLE_EQ       shift and go to state 32
    NOT_EQ          shift and go to state 33
    >               shift and go to state 34
    <               shift and go to state 35
    LESS_EQ         shift and go to state 36
    GREATER_EQ      shift and go to state 37

  ! POWER           [ reduce using rule 28 (expression -> expression % expression .) ]
  ! +               [ reduce using rule 28 (expression -> expression % expression .) ]
  ! -               [ reduce using rule 28 (expression -> expression % expression .) ]
  ! *               [ reduce using rule 28 (expression -> expression % expression .) ]
  ! /               [ reduce using rule 28 (expression -> expression % expression .) ]
  ! %               [ reduce using rule 28 (expression -> expression % expression .) ]
  ! ELLIPSIS        [ reduce using rule 28 (expression -> expression % expression .) ]
  ! DOUBLE_EQ       [ reduce using rule 28 (expression -> expression % expression .) ]
  ! NOT_EQ          [ reduce using rule 28 (expression -> expression % expression .) ]
  ! >               [ reduce using rule 28 (expression -> expression % expression .) ]
  ! <               [ reduce using rule 28 (expression -> expression % expression .) ]
  ! LESS_EQ         [ reduce using rule 28 (expression -> expression % expression .) ]
  ! GREATER_EQ      [ reduce using rule 28 (expression -> expression % expression .) ]


state 59

    (29) expression -> expression ELLIPSIS expression .
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

    POWER           reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    +               reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    -               reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    %               reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    ELLIPSIS        reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    DOUBLE_EQ       reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    NOT_EQ          reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    >               reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    <               reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    LESS_EQ         reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    GREATER_EQ      reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    IF              reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    LET             reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    VAR             reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    NAME            reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    PRINT           reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    READLINE        reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    MIN             reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    MAX             reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    ABS             reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    NUMBER          reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    DQ_STRING       reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    SQ_STRING       reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    (               reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    FOR             reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    WHILE           reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    $end            reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    {               reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    )               reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    }               reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    ,               reduce using rule 29 (expression -> expression ELLIPSIS expression .)
    *               shift and go to state 28
    /               shift and go to state 29

  ! *               [ reduce using rule 29 (expression -> expression ELLIPSIS expression .) ]
  ! /               [ reduce using rule 29 (expression -> expression ELLIPSIS expression .) ]
  ! POWER           [ shift and go to state 25 ]
  ! +               [ shift and go to state 26 ]
  ! -               [ shift and go to state 27 ]
  ! %               [ shift and go to state 30 ]
  ! ELLIPSIS        [ shift and go to state 31 ]
  ! DOUBLE_EQ       [ shift and go to state 32 ]
  ! NOT_EQ          [ shift and go to state 33 ]
  ! >               [ shift and go to state 34 ]
  ! <               [ shift and go to state 35 ]
  ! LESS_EQ         [ shift and go to state 36 ]
  ! GREATER_EQ      [ shift and go to state 37 ]


state 60

    (35) expression -> expression DOUBLE_EQ expression .
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for ELLIPSIS resolved as shift
  ! shift/reduce conflict for DOUBLE_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
    IF              reduce using rule 35 (expression -> expression DOUBLE_EQ expression .)
    LET             reduce using rule 35 (expression -> expression DOUBLE_EQ expression .)
    VAR             reduce using rule 35 (expression -> expression DOUBLE_EQ expression .)
    NAME            reduce using rule 35 (expression -> expression DOUBLE_EQ expression .)
    PRINT           reduce using rule 35 (expression -> expression DOUBLE_EQ expression .)
    READLINE        reduce using rule 35 (expression -> expression DOUBLE_EQ expression .)
    MIN             reduce using rule 35 (expression -> expression DOUBLE_EQ expression .)
    MAX             reduce using rule 35 (expression -> expression DOUBLE_EQ expression .)
    ABS             reduce using rule 35 (expression -> expression DOUBLE_EQ expression .)
    NUMBER          reduce using rule 35 (expression -> expression DOUBLE_EQ expression .)
    DQ_STRING       reduce using rule 35 (expression -> expression DOUBLE_EQ expression .)
    SQ_STRING       reduce using rule 35 (expression -> expression DOUBLE_EQ expression .)
    (               reduce using rule 35 (expression -> expression DOUBLE_EQ expression .)
    FOR             reduce using rule 35 (expression -> expression DOUBLE_EQ expression .)
    WHILE           reduce using rule 35 (expression -> expression DOUBLE_EQ expression .)
    $end            reduce using rule 35 (expression -> expression DOUBLE_EQ expression .)
    {               reduce using rule 35 (expression -> expression DOUBLE_EQ expression .)
    )               reduce using rule 35 (expression -> expression DOUBLE_EQ expression .)
    }               reduce using rule 35 (expression -> expression DOUBLE_EQ expression .)
    ,               reduce using rule 35 (expression -> expression DOUBLE_EQ expression .)
    POWER           shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29
    %               shift and go to state 30
    ELLIPSIS        shift and go to state 31
    DOUBLE_EQ       shift and go to state 32
    NOT_EQ          shift and go to state 33
    >               shift and go to state 34
    <               shift and go to state 35
    LESS_EQ         shift and go to state 36
    GREATER_EQ      shift and go to state 37

  ! POWER           [ reduce using rule 35 (expression -> expression DOUBLE_EQ expression .) ]
  ! +               [ reduce using rule 35 (expression -> expression DOUBLE_EQ expression .) ]
  ! -               [ reduce using rule 35 (expression -> expression DOUBLE_EQ expression .) ]
  ! *               [ reduce using rule 35 (expression -> expression DOUBLE_EQ expression .) ]
  ! /               [ reduce using rule 35 (expression -> expression DOUBLE_EQ expression .) ]
  ! %               [ reduce using rule 35 (expression -> expression DOUBLE_EQ expression .) ]
  ! ELLIPSIS        [ reduce using rule 35 (expression -> expression DOUBLE_EQ expression .) ]
  ! DOUBLE_EQ       [ reduce using rule 35 (expression -> expression DOUBLE_EQ expression .) ]
  ! NOT_EQ          [ reduce using rule 35 (expression -> expression DOUBLE_EQ expression .) ]
  ! >               [ reduce using rule 35 (expression -> expression DOUBLE_EQ expression .) ]
  ! <               [ reduce using rule 35 (expression -> expression DOUBLE_EQ expression .) ]
  ! LESS_EQ         [ reduce using rule 35 (expression -> expression DOUBLE_EQ expression .) ]
  ! GREATER_EQ      [ reduce using rule 35 (expression -> expression DOUBLE_EQ expression .) ]


state 61

    (36) expression -> expression NOT_EQ expression .
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for ELLIPSIS resolved as shift
  ! shift/reduce conflict for DOUBLE_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
    IF              reduce using rule 36 (expression -> expression NOT_EQ expression .)
    LET             reduce using rule 36 (expression -> expression NOT_EQ expression .)
    VAR             reduce using rule 36 (expression -> expression NOT_EQ expression .)
    NAME            reduce using rule 36 (expression -> expression NOT_EQ expression .)
    PRINT           reduce using rule 36 (expression -> expression NOT_EQ expression .)
    READLINE        reduce using rule 36 (expression -> expression NOT_EQ expression .)
    MIN             reduce using rule 36 (expression -> expression NOT_EQ expression .)
    MAX             reduce using rule 36 (expression -> expression NOT_EQ expression .)
    ABS             reduce using rule 36 (expression -> expression NOT_EQ expression .)
    NUMBER          reduce using rule 36 (expression -> expression NOT_EQ expression .)
    DQ_STRING       reduce using rule 36 (expression -> expression NOT_EQ expression .)
    SQ_STRING       reduce using rule 36 (expression -> expression NOT_EQ expression .)
    (               reduce using rule 36 (expression -> expression NOT_EQ expression .)
    FOR             reduce using rule 36 (expression -> expression NOT_EQ expression .)
    WHILE           reduce using rule 36 (expression -> expression NOT_EQ expression .)
    $end            reduce using rule 36 (expression -> expression NOT_EQ expression .)
    {               reduce using rule 36 (expression -> expression NOT_EQ expression .)
    )               reduce using rule 36 (expression -> expression NOT_EQ expression .)
    }               reduce using rule 36 (expression -> expression NOT_EQ expression .)
    ,               reduce using rule 36 (expression -> expression NOT_EQ expression .)
    POWER           shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29
    %               shift and go to state 30
    ELLIPSIS        shift and go to state 31
    DOUBLE_EQ       shift and go to state 32
    NOT_EQ          shift and go to state 33
    >               shift and go to state 34
    <               shift and go to state 35
    LESS_EQ         shift and go to state 36
    GREATER_EQ      shift and go to state 37

  ! POWER           [ reduce using rule 36 (expression -> expression NOT_EQ expression .) ]
  ! +               [ reduce using rule 36 (expression -> expression NOT_EQ expression .) ]
  ! -               [ reduce using rule 36 (expression -> expression NOT_EQ expression .) ]
  ! *               [ reduce using rule 36 (expression -> expression NOT_EQ expression .) ]
  ! /               [ reduce using rule 36 (expression -> expression NOT_EQ expression .) ]
  ! %               [ reduce using rule 36 (expression -> expression NOT_EQ expression .) ]
  ! ELLIPSIS        [ reduce using rule 36 (expression -> expression NOT_EQ expression .) ]
  ! DOUBLE_EQ       [ reduce using rule 36 (expression -> expression NOT_EQ expression .) ]
  ! NOT_EQ          [ reduce using rule 36 (expression -> expression NOT_EQ expression .) ]
  ! >               [ reduce using rule 36 (expression -> expression NOT_EQ expression .) ]
  ! <               [ reduce using rule 36 (expression -> expression NOT_EQ expression .) ]
  ! LESS_EQ         [ reduce using rule 36 (expression -> expression NOT_EQ expression .) ]
  ! GREATER_EQ      [ reduce using rule 36 (expression -> expression NOT_EQ expression .) ]


state 62

    (37) expression -> expression > expression .
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for ELLIPSIS resolved as shift
  ! shift/reduce conflict for DOUBLE_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
    IF              reduce using rule 37 (expression -> expression > expression .)
    LET             reduce using rule 37 (expression -> expression > expression .)
    VAR             reduce using rule 37 (expression -> expression > expression .)
    NAME            reduce using rule 37 (expression -> expression > expression .)
    PRINT           reduce using rule 37 (expression -> expression > expression .)
    READLINE        reduce using rule 37 (expression -> expression > expression .)
    MIN             reduce using rule 37 (expression -> expression > expression .)
    MAX             reduce using rule 37 (expression -> expression > expression .)
    ABS             reduce using rule 37 (expression -> expression > expression .)
    NUMBER          reduce using rule 37 (expression -> expression > expression .)
    DQ_STRING       reduce using rule 37 (expression -> expression > expression .)
    SQ_STRING       reduce using rule 37 (expression -> expression > expression .)
    (               reduce using rule 37 (expression -> expression > expression .)
    FOR             reduce using rule 37 (expression -> expression > expression .)
    WHILE           reduce using rule 37 (expression -> expression > expression .)
    $end            reduce using rule 37 (expression -> expression > expression .)
    {               reduce using rule 37 (expression -> expression > expression .)
    )               reduce using rule 37 (expression -> expression > expression .)
    }               reduce using rule 37 (expression -> expression > expression .)
    ,               reduce using rule 37 (expression -> expression > expression .)
    POWER           shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29
    %               shift and go to state 30
    ELLIPSIS        shift and go to state 31
    DOUBLE_EQ       shift and go to state 32
    NOT_EQ          shift and go to state 33
    >               shift and go to state 34
    <               shift and go to state 35
    LESS_EQ         shift and go to state 36
    GREATER_EQ      shift and go to state 37

  ! POWER           [ reduce using rule 37 (expression -> expression > expression .) ]
  ! +               [ reduce using rule 37 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 37 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 37 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 37 (expression -> expression > expression .) ]
  ! %               [ reduce using rule 37 (expression -> expression > expression .) ]
  ! ELLIPSIS        [ reduce using rule 37 (expression -> expression > expression .) ]
  ! DOUBLE_EQ       [ reduce using rule 37 (expression -> expression > expression .) ]
  ! NOT_EQ          [ reduce using rule 37 (expression -> expression > expression .) ]
  ! >               [ reduce using rule 37 (expression -> expression > expression .) ]
  ! <               [ reduce using rule 37 (expression -> expression > expression .) ]
  ! LESS_EQ         [ reduce using rule 37 (expression -> expression > expression .) ]
  ! GREATER_EQ      [ reduce using rule 37 (expression -> expression > expression .) ]


state 63

    (38) expression -> expression < expression .
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for ELLIPSIS resolved as shift
  ! shift/reduce conflict for DOUBLE_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
    IF              reduce using rule 38 (expression -> expression < expression .)
    LET             reduce using rule 38 (expression -> expression < expression .)
    VAR             reduce using rule 38 (expression -> expression < expression .)
    NAME            reduce using rule 38 (expression -> expression < expression .)
    PRINT           reduce using rule 38 (expression -> expression < expression .)
    READLINE        reduce using rule 38 (expression -> expression < expression .)
    MIN             reduce using rule 38 (expression -> expression < expression .)
    MAX             reduce using rule 38 (expression -> expression < expression .)
    ABS             reduce using rule 38 (expression -> expression < expression .)
    NUMBER          reduce using rule 38 (expression -> expression < expression .)
    DQ_STRING       reduce using rule 38 (expression -> expression < expression .)
    SQ_STRING       reduce using rule 38 (expression -> expression < expression .)
    (               reduce using rule 38 (expression -> expression < expression .)
    FOR             reduce using rule 38 (expression -> expression < expression .)
    WHILE           reduce using rule 38 (expression -> expression < expression .)
    $end            reduce using rule 38 (expression -> expression < expression .)
    {               reduce using rule 38 (expression -> expression < expression .)
    )               reduce using rule 38 (expression -> expression < expression .)
    }               reduce using rule 38 (expression -> expression < expression .)
    ,               reduce using rule 38 (expression -> expression < expression .)
    POWER           shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29
    %               shift and go to state 30
    ELLIPSIS        shift and go to state 31
    DOUBLE_EQ       shift and go to state 32
    NOT_EQ          shift and go to state 33
    >               shift and go to state 34
    <               shift and go to state 35
    LESS_EQ         shift and go to state 36
    GREATER_EQ      shift and go to state 37

  ! POWER           [ reduce using rule 38 (expression -> expression < expression .) ]
  ! +               [ reduce using rule 38 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 38 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 38 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 38 (expression -> expression < expression .) ]
  ! %               [ reduce using rule 38 (expression -> expression < expression .) ]
  ! ELLIPSIS        [ reduce using rule 38 (expression -> expression < expression .) ]
  ! DOUBLE_EQ       [ reduce using rule 38 (expression -> expression < expression .) ]
  ! NOT_EQ          [ reduce using rule 38 (expression -> expression < expression .) ]
  ! >               [ reduce using rule 38 (expression -> expression < expression .) ]
  ! <               [ reduce using rule 38 (expression -> expression < expression .) ]
  ! LESS_EQ         [ reduce using rule 38 (expression -> expression < expression .) ]
  ! GREATER_EQ      [ reduce using rule 38 (expression -> expression < expression .) ]


state 64

    (39) expression -> expression LESS_EQ expression .
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for ELLIPSIS resolved as shift
  ! shift/reduce conflict for DOUBLE_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
    IF              reduce using rule 39 (expression -> expression LESS_EQ expression .)
    LET             reduce using rule 39 (expression -> expression LESS_EQ expression .)
    VAR             reduce using rule 39 (expression -> expression LESS_EQ expression .)
    NAME            reduce using rule 39 (expression -> expression LESS_EQ expression .)
    PRINT           reduce using rule 39 (expression -> expression LESS_EQ expression .)
    READLINE        reduce using rule 39 (expression -> expression LESS_EQ expression .)
    MIN             reduce using rule 39 (expression -> expression LESS_EQ expression .)
    MAX             reduce using rule 39 (expression -> expression LESS_EQ expression .)
    ABS             reduce using rule 39 (expression -> expression LESS_EQ expression .)
    NUMBER          reduce using rule 39 (expression -> expression LESS_EQ expression .)
    DQ_STRING       reduce using rule 39 (expression -> expression LESS_EQ expression .)
    SQ_STRING       reduce using rule 39 (expression -> expression LESS_EQ expression .)
    (               reduce using rule 39 (expression -> expression LESS_EQ expression .)
    FOR             reduce using rule 39 (expression -> expression LESS_EQ expression .)
    WHILE           reduce using rule 39 (expression -> expression LESS_EQ expression .)
    $end            reduce using rule 39 (expression -> expression LESS_EQ expression .)
    {               reduce using rule 39 (expression -> expression LESS_EQ expression .)
    )               reduce using rule 39 (expression -> expression LESS_EQ expression .)
    }               reduce using rule 39 (expression -> expression LESS_EQ expression .)
    ,               reduce using rule 39 (expression -> expression LESS_EQ expression .)
    POWER           shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29
    %               shift and go to state 30
    ELLIPSIS        shift and go to state 31
    DOUBLE_EQ       shift and go to state 32
    NOT_EQ          shift and go to state 33
    >               shift and go to state 34
    <               shift and go to state 35
    LESS_EQ         shift and go to state 36
    GREATER_EQ      shift and go to state 37

  ! POWER           [ reduce using rule 39 (expression -> expression LESS_EQ expression .) ]
  ! +               [ reduce using rule 39 (expression -> expression LESS_EQ expression .) ]
  ! -               [ reduce using rule 39 (expression -> expression LESS_EQ expression .) ]
  ! *               [ reduce using rule 39 (expression -> expression LESS_EQ expression .) ]
  ! /               [ reduce using rule 39 (expression -> expression LESS_EQ expression .) ]
  ! %               [ reduce using rule 39 (expression -> expression LESS_EQ expression .) ]
  ! ELLIPSIS        [ reduce using rule 39 (expression -> expression LESS_EQ expression .) ]
  ! DOUBLE_EQ       [ reduce using rule 39 (expression -> expression LESS_EQ expression .) ]
  ! NOT_EQ          [ reduce using rule 39 (expression -> expression LESS_EQ expression .) ]
  ! >               [ reduce using rule 39 (expression -> expression LESS_EQ expression .) ]
  ! <               [ reduce using rule 39 (expression -> expression LESS_EQ expression .) ]
  ! LESS_EQ         [ reduce using rule 39 (expression -> expression LESS_EQ expression .) ]
  ! GREATER_EQ      [ reduce using rule 39 (expression -> expression LESS_EQ expression .) ]


state 65

    (40) expression -> expression GREATER_EQ expression .
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for % resolved as shift
  ! shift/reduce conflict for ELLIPSIS resolved as shift
  ! shift/reduce conflict for DOUBLE_EQ resolved as shift
  ! shift/reduce conflict for NOT_EQ resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for LESS_EQ resolved as shift
  ! shift/reduce conflict for GREATER_EQ resolved as shift
    IF              reduce using rule 40 (expression -> expression GREATER_EQ expression .)
    LET             reduce using rule 40 (expression -> expression GREATER_EQ expression .)
    VAR             reduce using rule 40 (expression -> expression GREATER_EQ expression .)
    NAME            reduce using rule 40 (expression -> expression GREATER_EQ expression .)
    PRINT           reduce using rule 40 (expression -> expression GREATER_EQ expression .)
    READLINE        reduce using rule 40 (expression -> expression GREATER_EQ expression .)
    MIN             reduce using rule 40 (expression -> expression GREATER_EQ expression .)
    MAX             reduce using rule 40 (expression -> expression GREATER_EQ expression .)
    ABS             reduce using rule 40 (expression -> expression GREATER_EQ expression .)
    NUMBER          reduce using rule 40 (expression -> expression GREATER_EQ expression .)
    DQ_STRING       reduce using rule 40 (expression -> expression GREATER_EQ expression .)
    SQ_STRING       reduce using rule 40 (expression -> expression GREATER_EQ expression .)
    (               reduce using rule 40 (expression -> expression GREATER_EQ expression .)
    FOR             reduce using rule 40 (expression -> expression GREATER_EQ expression .)
    WHILE           reduce using rule 40 (expression -> expression GREATER_EQ expression .)
    $end            reduce using rule 40 (expression -> expression GREATER_EQ expression .)
    {               reduce using rule 40 (expression -> expression GREATER_EQ expression .)
    )               reduce using rule 40 (expression -> expression GREATER_EQ expression .)
    }               reduce using rule 40 (expression -> expression GREATER_EQ expression .)
    ,               reduce using rule 40 (expression -> expression GREATER_EQ expression .)
    POWER           shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29
    %               shift and go to state 30
    ELLIPSIS        shift and go to state 31
    DOUBLE_EQ       shift and go to state 32
    NOT_EQ          shift and go to state 33
    >               shift and go to state 34
    <               shift and go to state 35
    LESS_EQ         shift and go to state 36
    GREATER_EQ      shift and go to state 37

  ! POWER           [ reduce using rule 40 (expression -> expression GREATER_EQ expression .) ]
  ! +               [ reduce using rule 40 (expression -> expression GREATER_EQ expression .) ]
  ! -               [ reduce using rule 40 (expression -> expression GREATER_EQ expression .) ]
  ! *               [ reduce using rule 40 (expression -> expression GREATER_EQ expression .) ]
  ! /               [ reduce using rule 40 (expression -> expression GREATER_EQ expression .) ]
  ! %               [ reduce using rule 40 (expression -> expression GREATER_EQ expression .) ]
  ! ELLIPSIS        [ reduce using rule 40 (expression -> expression GREATER_EQ expression .) ]
  ! DOUBLE_EQ       [ reduce using rule 40 (expression -> expression GREATER_EQ expression .) ]
  ! NOT_EQ          [ reduce using rule 40 (expression -> expression GREATER_EQ expression .) ]
  ! >               [ reduce using rule 40 (expression -> expression GREATER_EQ expression .) ]
  ! <               [ reduce using rule 40 (expression -> expression GREATER_EQ expression .) ]
  ! LESS_EQ         [ reduce using rule 40 (expression -> expression GREATER_EQ expression .) ]
  ! GREATER_EQ      [ reduce using rule 40 (expression -> expression GREATER_EQ expression .) ]


state 66

    (41) statement -> IF expression { . statement_block }
    (42) statement -> IF expression { . statement } ELSE { statement_block }
    (10) statement_block -> . { statement_list }
    (12) statement_block -> . statement
    (6) statement -> . assign
    (13) statement -> . print
    (14) statement -> . expression
    (15) statement -> . for
    (41) statement -> . IF expression { statement_block }
    (42) statement -> . IF expression { statement } ELSE { statement_block }
    (7) assign -> . LET NAME = expression
    (8) assign -> . VAR NAME = expression
    (9) assign -> . NAME = expression
    (16) print -> . PRINT ( print_expression_list )
    (17) print -> . PRINT ( expression )
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression
    (4) for -> . FOR for_assign IN expression statement_block
    (5) for -> . WHILE expression statement_block

    {               shift and go to state 81
    IF              shift and go to state 8
    LET             shift and go to state 9
    VAR             shift and go to state 11
    NAME            shift and go to state 10
    PRINT           shift and go to state 12
    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13
    FOR             shift and go to state 22
    WHILE           shift and go to state 23

    expression                     shift and go to state 6
    statement_block                shift and go to state 83
    statement                      shift and go to state 84
    assign                         shift and go to state 4
    print                          shift and go to state 5
    for                            shift and go to state 7

state 67

    (7) assign -> LET NAME = . expression
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 85

state 68

    (9) assign -> NAME = expression .
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

  ! shift/reduce conflict for - resolved as shift
    IF              reduce using rule 9 (assign -> NAME = expression .)
    LET             reduce using rule 9 (assign -> NAME = expression .)
    VAR             reduce using rule 9 (assign -> NAME = expression .)
    NAME            reduce using rule 9 (assign -> NAME = expression .)
    PRINT           reduce using rule 9 (assign -> NAME = expression .)
    READLINE        reduce using rule 9 (assign -> NAME = expression .)
    MIN             reduce using rule 9 (assign -> NAME = expression .)
    MAX             reduce using rule 9 (assign -> NAME = expression .)
    ABS             reduce using rule 9 (assign -> NAME = expression .)
    NUMBER          reduce using rule 9 (assign -> NAME = expression .)
    DQ_STRING       reduce using rule 9 (assign -> NAME = expression .)
    SQ_STRING       reduce using rule 9 (assign -> NAME = expression .)
    (               reduce using rule 9 (assign -> NAME = expression .)
    FOR             reduce using rule 9 (assign -> NAME = expression .)
    WHILE           reduce using rule 9 (assign -> NAME = expression .)
    $end            reduce using rule 9 (assign -> NAME = expression .)
    }               reduce using rule 9 (assign -> NAME = expression .)
    POWER           shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29
    %               shift and go to state 30
    ELLIPSIS        shift and go to state 31
    DOUBLE_EQ       shift and go to state 32
    NOT_EQ          shift and go to state 33
    >               shift and go to state 34
    <               shift and go to state 35
    LESS_EQ         shift and go to state 36
    GREATER_EQ      shift and go to state 37

  ! -               [ reduce using rule 9 (assign -> NAME = expression .) ]


state 69

    (8) assign -> VAR NAME = . expression
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 86

state 70

    (16) print -> PRINT ( print_expression_list . )
    (44) print_expression_list -> print_expression_list . print_expression
    (46) print_expression -> . expression ,
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    )               shift and go to state 87
    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    print_expression               shift and go to state 88
    expression                     shift and go to state 89

state 71

    (17) print -> PRINT ( expression . )
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression
    (46) print_expression -> expression . ,

    )               shift and go to state 90
    POWER           shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29
    %               shift and go to state 30
    ELLIPSIS        shift and go to state 31
    DOUBLE_EQ       shift and go to state 32
    NOT_EQ          shift and go to state 33
    >               shift and go to state 34
    <               shift and go to state 35
    LESS_EQ         shift and go to state 36
    GREATER_EQ      shift and go to state 37
    ,               shift and go to state 91


state 72

    (45) print_expression_list -> print_expression .

    )               reduce using rule 45 (print_expression_list -> print_expression .)
    READLINE        reduce using rule 45 (print_expression_list -> print_expression .)
    MIN             reduce using rule 45 (print_expression_list -> print_expression .)
    MAX             reduce using rule 45 (print_expression_list -> print_expression .)
    ABS             reduce using rule 45 (print_expression_list -> print_expression .)
    -               reduce using rule 45 (print_expression_list -> print_expression .)
    NUMBER          reduce using rule 45 (print_expression_list -> print_expression .)
    NAME            reduce using rule 45 (print_expression_list -> print_expression .)
    DQ_STRING       reduce using rule 45 (print_expression_list -> print_expression .)
    SQ_STRING       reduce using rule 45 (print_expression_list -> print_expression .)
    (               reduce using rule 45 (print_expression_list -> print_expression .)


state 73

    (34) expression -> ( expression ) .

    POWER           reduce using rule 34 (expression -> ( expression ) .)
    +               reduce using rule 34 (expression -> ( expression ) .)
    -               reduce using rule 34 (expression -> ( expression ) .)
    *               reduce using rule 34 (expression -> ( expression ) .)
    /               reduce using rule 34 (expression -> ( expression ) .)
    %               reduce using rule 34 (expression -> ( expression ) .)
    ELLIPSIS        reduce using rule 34 (expression -> ( expression ) .)
    DOUBLE_EQ       reduce using rule 34 (expression -> ( expression ) .)
    NOT_EQ          reduce using rule 34 (expression -> ( expression ) .)
    >               reduce using rule 34 (expression -> ( expression ) .)
    <               reduce using rule 34 (expression -> ( expression ) .)
    LESS_EQ         reduce using rule 34 (expression -> ( expression ) .)
    GREATER_EQ      reduce using rule 34 (expression -> ( expression ) .)
    IF              reduce using rule 34 (expression -> ( expression ) .)
    LET             reduce using rule 34 (expression -> ( expression ) .)
    VAR             reduce using rule 34 (expression -> ( expression ) .)
    NAME            reduce using rule 34 (expression -> ( expression ) .)
    PRINT           reduce using rule 34 (expression -> ( expression ) .)
    READLINE        reduce using rule 34 (expression -> ( expression ) .)
    MIN             reduce using rule 34 (expression -> ( expression ) .)
    MAX             reduce using rule 34 (expression -> ( expression ) .)
    ABS             reduce using rule 34 (expression -> ( expression ) .)
    NUMBER          reduce using rule 34 (expression -> ( expression ) .)
    DQ_STRING       reduce using rule 34 (expression -> ( expression ) .)
    SQ_STRING       reduce using rule 34 (expression -> ( expression ) .)
    (               reduce using rule 34 (expression -> ( expression ) .)
    FOR             reduce using rule 34 (expression -> ( expression ) .)
    WHILE           reduce using rule 34 (expression -> ( expression ) .)
    $end            reduce using rule 34 (expression -> ( expression ) .)
    {               reduce using rule 34 (expression -> ( expression ) .)
    )               reduce using rule 34 (expression -> ( expression ) .)
    }               reduce using rule 34 (expression -> ( expression ) .)
    ,               reduce using rule 34 (expression -> ( expression ) .)


state 74

    (18) expression -> READLINE ( ) .

    POWER           reduce using rule 18 (expression -> READLINE ( ) .)
    +               reduce using rule 18 (expression -> READLINE ( ) .)
    -               reduce using rule 18 (expression -> READLINE ( ) .)
    *               reduce using rule 18 (expression -> READLINE ( ) .)
    /               reduce using rule 18 (expression -> READLINE ( ) .)
    %               reduce using rule 18 (expression -> READLINE ( ) .)
    ELLIPSIS        reduce using rule 18 (expression -> READLINE ( ) .)
    DOUBLE_EQ       reduce using rule 18 (expression -> READLINE ( ) .)
    NOT_EQ          reduce using rule 18 (expression -> READLINE ( ) .)
    >               reduce using rule 18 (expression -> READLINE ( ) .)
    <               reduce using rule 18 (expression -> READLINE ( ) .)
    LESS_EQ         reduce using rule 18 (expression -> READLINE ( ) .)
    GREATER_EQ      reduce using rule 18 (expression -> READLINE ( ) .)
    IF              reduce using rule 18 (expression -> READLINE ( ) .)
    LET             reduce using rule 18 (expression -> READLINE ( ) .)
    VAR             reduce using rule 18 (expression -> READLINE ( ) .)
    NAME            reduce using rule 18 (expression -> READLINE ( ) .)
    PRINT           reduce using rule 18 (expression -> READLINE ( ) .)
    READLINE        reduce using rule 18 (expression -> READLINE ( ) .)
    MIN             reduce using rule 18 (expression -> READLINE ( ) .)
    MAX             reduce using rule 18 (expression -> READLINE ( ) .)
    ABS             reduce using rule 18 (expression -> READLINE ( ) .)
    NUMBER          reduce using rule 18 (expression -> READLINE ( ) .)
    DQ_STRING       reduce using rule 18 (expression -> READLINE ( ) .)
    SQ_STRING       reduce using rule 18 (expression -> READLINE ( ) .)
    (               reduce using rule 18 (expression -> READLINE ( ) .)
    FOR             reduce using rule 18 (expression -> READLINE ( ) .)
    WHILE           reduce using rule 18 (expression -> READLINE ( ) .)
    $end            reduce using rule 18 (expression -> READLINE ( ) .)
    {               reduce using rule 18 (expression -> READLINE ( ) .)
    )               reduce using rule 18 (expression -> READLINE ( ) .)
    }               reduce using rule 18 (expression -> READLINE ( ) .)
    ,               reduce using rule 18 (expression -> READLINE ( ) .)


state 75

    (19) expression -> MIN ( expression . , expression )
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

    ,               shift and go to state 92
    POWER           shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29
    %               shift and go to state 30
    ELLIPSIS        shift and go to state 31
    DOUBLE_EQ       shift and go to state 32
    NOT_EQ          shift and go to state 33
    >               shift and go to state 34
    <               shift and go to state 35
    LESS_EQ         shift and go to state 36
    GREATER_EQ      shift and go to state 37


state 76

    (20) expression -> MAX ( expression . , expression )
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

    ,               shift and go to state 93
    POWER           shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29
    %               shift and go to state 30
    ELLIPSIS        shift and go to state 31
    DOUBLE_EQ       shift and go to state 32
    NOT_EQ          shift and go to state 33
    >               shift and go to state 34
    <               shift and go to state 35
    LESS_EQ         shift and go to state 36
    GREATER_EQ      shift and go to state 37


state 77

    (21) expression -> ABS ( expression . )
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

    )               shift and go to state 94
    POWER           shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29
    %               shift and go to state 30
    ELLIPSIS        shift and go to state 31
    DOUBLE_EQ       shift and go to state 32
    NOT_EQ          shift and go to state 33
    >               shift and go to state 34
    <               shift and go to state 35
    LESS_EQ         shift and go to state 36
    GREATER_EQ      shift and go to state 37


state 78

    (4) for -> FOR for_assign IN . expression statement_block
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 95

state 79

    (5) for -> WHILE expression statement_block .

    IF              reduce using rule 5 (for -> WHILE expression statement_block .)
    LET             reduce using rule 5 (for -> WHILE expression statement_block .)
    VAR             reduce using rule 5 (for -> WHILE expression statement_block .)
    NAME            reduce using rule 5 (for -> WHILE expression statement_block .)
    PRINT           reduce using rule 5 (for -> WHILE expression statement_block .)
    READLINE        reduce using rule 5 (for -> WHILE expression statement_block .)
    MIN             reduce using rule 5 (for -> WHILE expression statement_block .)
    MAX             reduce using rule 5 (for -> WHILE expression statement_block .)
    ABS             reduce using rule 5 (for -> WHILE expression statement_block .)
    -               reduce using rule 5 (for -> WHILE expression statement_block .)
    NUMBER          reduce using rule 5 (for -> WHILE expression statement_block .)
    DQ_STRING       reduce using rule 5 (for -> WHILE expression statement_block .)
    SQ_STRING       reduce using rule 5 (for -> WHILE expression statement_block .)
    (               reduce using rule 5 (for -> WHILE expression statement_block .)
    FOR             reduce using rule 5 (for -> WHILE expression statement_block .)
    WHILE           reduce using rule 5 (for -> WHILE expression statement_block .)
    $end            reduce using rule 5 (for -> WHILE expression statement_block .)
    }               reduce using rule 5 (for -> WHILE expression statement_block .)


state 80

    (25) expression -> expression - . expression
    (23) expression -> - . expression
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 96

state 81

    (10) statement_block -> { . statement_list }
    (2) statement_list -> . statement_list statement
    (3) statement_list -> . statement
    (6) statement -> . assign
    (13) statement -> . print
    (14) statement -> . expression
    (15) statement -> . for
    (41) statement -> . IF expression { statement_block }
    (42) statement -> . IF expression { statement } ELSE { statement_block }
    (7) assign -> . LET NAME = expression
    (8) assign -> . VAR NAME = expression
    (9) assign -> . NAME = expression
    (16) print -> . PRINT ( print_expression_list )
    (17) print -> . PRINT ( expression )
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression
    (4) for -> . FOR for_assign IN expression statement_block
    (5) for -> . WHILE expression statement_block

    IF              shift and go to state 8
    LET             shift and go to state 9
    VAR             shift and go to state 11
    NAME            shift and go to state 10
    PRINT           shift and go to state 12
    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13
    FOR             shift and go to state 22
    WHILE           shift and go to state 23

    statement_list                 shift and go to state 97
    statement                      shift and go to state 3
    assign                         shift and go to state 4
    print                          shift and go to state 5
    expression                     shift and go to state 6
    for                            shift and go to state 7

state 82

    (12) statement_block -> statement .

    IF              reduce using rule 12 (statement_block -> statement .)
    LET             reduce using rule 12 (statement_block -> statement .)
    VAR             reduce using rule 12 (statement_block -> statement .)
    NAME            reduce using rule 12 (statement_block -> statement .)
    PRINT           reduce using rule 12 (statement_block -> statement .)
    READLINE        reduce using rule 12 (statement_block -> statement .)
    MIN             reduce using rule 12 (statement_block -> statement .)
    MAX             reduce using rule 12 (statement_block -> statement .)
    ABS             reduce using rule 12 (statement_block -> statement .)
    -               reduce using rule 12 (statement_block -> statement .)
    NUMBER          reduce using rule 12 (statement_block -> statement .)
    DQ_STRING       reduce using rule 12 (statement_block -> statement .)
    SQ_STRING       reduce using rule 12 (statement_block -> statement .)
    (               reduce using rule 12 (statement_block -> statement .)
    FOR             reduce using rule 12 (statement_block -> statement .)
    WHILE           reduce using rule 12 (statement_block -> statement .)
    $end            reduce using rule 12 (statement_block -> statement .)
    }               reduce using rule 12 (statement_block -> statement .)


state 83

    (41) statement -> IF expression { statement_block . }

    }               shift and go to state 98


state 84

    (42) statement -> IF expression { statement . } ELSE { statement_block }
    (12) statement_block -> statement .

  ! shift/reduce conflict for } resolved as shift
    }               shift and go to state 99

  ! }               [ reduce using rule 12 (statement_block -> statement .) ]


state 85

    (7) assign -> LET NAME = expression .
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

  ! shift/reduce conflict for - resolved as shift
    IF              reduce using rule 7 (assign -> LET NAME = expression .)
    LET             reduce using rule 7 (assign -> LET NAME = expression .)
    VAR             reduce using rule 7 (assign -> LET NAME = expression .)
    NAME            reduce using rule 7 (assign -> LET NAME = expression .)
    PRINT           reduce using rule 7 (assign -> LET NAME = expression .)
    READLINE        reduce using rule 7 (assign -> LET NAME = expression .)
    MIN             reduce using rule 7 (assign -> LET NAME = expression .)
    MAX             reduce using rule 7 (assign -> LET NAME = expression .)
    ABS             reduce using rule 7 (assign -> LET NAME = expression .)
    NUMBER          reduce using rule 7 (assign -> LET NAME = expression .)
    DQ_STRING       reduce using rule 7 (assign -> LET NAME = expression .)
    SQ_STRING       reduce using rule 7 (assign -> LET NAME = expression .)
    (               reduce using rule 7 (assign -> LET NAME = expression .)
    FOR             reduce using rule 7 (assign -> LET NAME = expression .)
    WHILE           reduce using rule 7 (assign -> LET NAME = expression .)
    $end            reduce using rule 7 (assign -> LET NAME = expression .)
    }               reduce using rule 7 (assign -> LET NAME = expression .)
    POWER           shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29
    %               shift and go to state 30
    ELLIPSIS        shift and go to state 31
    DOUBLE_EQ       shift and go to state 32
    NOT_EQ          shift and go to state 33
    >               shift and go to state 34
    <               shift and go to state 35
    LESS_EQ         shift and go to state 36
    GREATER_EQ      shift and go to state 37

  ! -               [ reduce using rule 7 (assign -> LET NAME = expression .) ]


state 86

    (8) assign -> VAR NAME = expression .
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

  ! shift/reduce conflict for - resolved as shift
    IF              reduce using rule 8 (assign -> VAR NAME = expression .)
    LET             reduce using rule 8 (assign -> VAR NAME = expression .)
    VAR             reduce using rule 8 (assign -> VAR NAME = expression .)
    NAME            reduce using rule 8 (assign -> VAR NAME = expression .)
    PRINT           reduce using rule 8 (assign -> VAR NAME = expression .)
    READLINE        reduce using rule 8 (assign -> VAR NAME = expression .)
    MIN             reduce using rule 8 (assign -> VAR NAME = expression .)
    MAX             reduce using rule 8 (assign -> VAR NAME = expression .)
    ABS             reduce using rule 8 (assign -> VAR NAME = expression .)
    NUMBER          reduce using rule 8 (assign -> VAR NAME = expression .)
    DQ_STRING       reduce using rule 8 (assign -> VAR NAME = expression .)
    SQ_STRING       reduce using rule 8 (assign -> VAR NAME = expression .)
    (               reduce using rule 8 (assign -> VAR NAME = expression .)
    FOR             reduce using rule 8 (assign -> VAR NAME = expression .)
    WHILE           reduce using rule 8 (assign -> VAR NAME = expression .)
    $end            reduce using rule 8 (assign -> VAR NAME = expression .)
    }               reduce using rule 8 (assign -> VAR NAME = expression .)
    POWER           shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29
    %               shift and go to state 30
    ELLIPSIS        shift and go to state 31
    DOUBLE_EQ       shift and go to state 32
    NOT_EQ          shift and go to state 33
    >               shift and go to state 34
    <               shift and go to state 35
    LESS_EQ         shift and go to state 36
    GREATER_EQ      shift and go to state 37

  ! -               [ reduce using rule 8 (assign -> VAR NAME = expression .) ]


state 87

    (16) print -> PRINT ( print_expression_list ) .

    IF              reduce using rule 16 (print -> PRINT ( print_expression_list ) .)
    LET             reduce using rule 16 (print -> PRINT ( print_expression_list ) .)
    VAR             reduce using rule 16 (print -> PRINT ( print_expression_list ) .)
    NAME            reduce using rule 16 (print -> PRINT ( print_expression_list ) .)
    PRINT           reduce using rule 16 (print -> PRINT ( print_expression_list ) .)
    READLINE        reduce using rule 16 (print -> PRINT ( print_expression_list ) .)
    MIN             reduce using rule 16 (print -> PRINT ( print_expression_list ) .)
    MAX             reduce using rule 16 (print -> PRINT ( print_expression_list ) .)
    ABS             reduce using rule 16 (print -> PRINT ( print_expression_list ) .)
    -               reduce using rule 16 (print -> PRINT ( print_expression_list ) .)
    NUMBER          reduce using rule 16 (print -> PRINT ( print_expression_list ) .)
    DQ_STRING       reduce using rule 16 (print -> PRINT ( print_expression_list ) .)
    SQ_STRING       reduce using rule 16 (print -> PRINT ( print_expression_list ) .)
    (               reduce using rule 16 (print -> PRINT ( print_expression_list ) .)
    FOR             reduce using rule 16 (print -> PRINT ( print_expression_list ) .)
    WHILE           reduce using rule 16 (print -> PRINT ( print_expression_list ) .)
    $end            reduce using rule 16 (print -> PRINT ( print_expression_list ) .)
    }               reduce using rule 16 (print -> PRINT ( print_expression_list ) .)


state 88

    (44) print_expression_list -> print_expression_list print_expression .

    )               reduce using rule 44 (print_expression_list -> print_expression_list print_expression .)
    READLINE        reduce using rule 44 (print_expression_list -> print_expression_list print_expression .)
    MIN             reduce using rule 44 (print_expression_list -> print_expression_list print_expression .)
    MAX             reduce using rule 44 (print_expression_list -> print_expression_list print_expression .)
    ABS             reduce using rule 44 (print_expression_list -> print_expression_list print_expression .)
    -               reduce using rule 44 (print_expression_list -> print_expression_list print_expression .)
    NUMBER          reduce using rule 44 (print_expression_list -> print_expression_list print_expression .)
    NAME            reduce using rule 44 (print_expression_list -> print_expression_list print_expression .)
    DQ_STRING       reduce using rule 44 (print_expression_list -> print_expression_list print_expression .)
    SQ_STRING       reduce using rule 44 (print_expression_list -> print_expression_list print_expression .)
    (               reduce using rule 44 (print_expression_list -> print_expression_list print_expression .)


state 89

    (46) print_expression -> expression . ,
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

    ,               shift and go to state 91
    POWER           shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29
    %               shift and go to state 30
    ELLIPSIS        shift and go to state 31
    DOUBLE_EQ       shift and go to state 32
    NOT_EQ          shift and go to state 33
    >               shift and go to state 34
    <               shift and go to state 35
    LESS_EQ         shift and go to state 36
    GREATER_EQ      shift and go to state 37


state 90

    (17) print -> PRINT ( expression ) .

    IF              reduce using rule 17 (print -> PRINT ( expression ) .)
    LET             reduce using rule 17 (print -> PRINT ( expression ) .)
    VAR             reduce using rule 17 (print -> PRINT ( expression ) .)
    NAME            reduce using rule 17 (print -> PRINT ( expression ) .)
    PRINT           reduce using rule 17 (print -> PRINT ( expression ) .)
    READLINE        reduce using rule 17 (print -> PRINT ( expression ) .)
    MIN             reduce using rule 17 (print -> PRINT ( expression ) .)
    MAX             reduce using rule 17 (print -> PRINT ( expression ) .)
    ABS             reduce using rule 17 (print -> PRINT ( expression ) .)
    -               reduce using rule 17 (print -> PRINT ( expression ) .)
    NUMBER          reduce using rule 17 (print -> PRINT ( expression ) .)
    DQ_STRING       reduce using rule 17 (print -> PRINT ( expression ) .)
    SQ_STRING       reduce using rule 17 (print -> PRINT ( expression ) .)
    (               reduce using rule 17 (print -> PRINT ( expression ) .)
    FOR             reduce using rule 17 (print -> PRINT ( expression ) .)
    WHILE           reduce using rule 17 (print -> PRINT ( expression ) .)
    $end            reduce using rule 17 (print -> PRINT ( expression ) .)
    }               reduce using rule 17 (print -> PRINT ( expression ) .)


state 91

    (46) print_expression -> expression , .

    )               reduce using rule 46 (print_expression -> expression , .)
    READLINE        reduce using rule 46 (print_expression -> expression , .)
    MIN             reduce using rule 46 (print_expression -> expression , .)
    MAX             reduce using rule 46 (print_expression -> expression , .)
    ABS             reduce using rule 46 (print_expression -> expression , .)
    -               reduce using rule 46 (print_expression -> expression , .)
    NUMBER          reduce using rule 46 (print_expression -> expression , .)
    NAME            reduce using rule 46 (print_expression -> expression , .)
    DQ_STRING       reduce using rule 46 (print_expression -> expression , .)
    SQ_STRING       reduce using rule 46 (print_expression -> expression , .)
    (               reduce using rule 46 (print_expression -> expression , .)


state 92

    (19) expression -> MIN ( expression , . expression )
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 100

state 93

    (20) expression -> MAX ( expression , . expression )
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression

    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    NAME            shift and go to state 39
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13

    expression                     shift and go to state 101

state 94

    (21) expression -> ABS ( expression ) .

    POWER           reduce using rule 21 (expression -> ABS ( expression ) .)
    +               reduce using rule 21 (expression -> ABS ( expression ) .)
    -               reduce using rule 21 (expression -> ABS ( expression ) .)
    *               reduce using rule 21 (expression -> ABS ( expression ) .)
    /               reduce using rule 21 (expression -> ABS ( expression ) .)
    %               reduce using rule 21 (expression -> ABS ( expression ) .)
    ELLIPSIS        reduce using rule 21 (expression -> ABS ( expression ) .)
    DOUBLE_EQ       reduce using rule 21 (expression -> ABS ( expression ) .)
    NOT_EQ          reduce using rule 21 (expression -> ABS ( expression ) .)
    >               reduce using rule 21 (expression -> ABS ( expression ) .)
    <               reduce using rule 21 (expression -> ABS ( expression ) .)
    LESS_EQ         reduce using rule 21 (expression -> ABS ( expression ) .)
    GREATER_EQ      reduce using rule 21 (expression -> ABS ( expression ) .)
    IF              reduce using rule 21 (expression -> ABS ( expression ) .)
    LET             reduce using rule 21 (expression -> ABS ( expression ) .)
    VAR             reduce using rule 21 (expression -> ABS ( expression ) .)
    NAME            reduce using rule 21 (expression -> ABS ( expression ) .)
    PRINT           reduce using rule 21 (expression -> ABS ( expression ) .)
    READLINE        reduce using rule 21 (expression -> ABS ( expression ) .)
    MIN             reduce using rule 21 (expression -> ABS ( expression ) .)
    MAX             reduce using rule 21 (expression -> ABS ( expression ) .)
    ABS             reduce using rule 21 (expression -> ABS ( expression ) .)
    NUMBER          reduce using rule 21 (expression -> ABS ( expression ) .)
    DQ_STRING       reduce using rule 21 (expression -> ABS ( expression ) .)
    SQ_STRING       reduce using rule 21 (expression -> ABS ( expression ) .)
    (               reduce using rule 21 (expression -> ABS ( expression ) .)
    FOR             reduce using rule 21 (expression -> ABS ( expression ) .)
    WHILE           reduce using rule 21 (expression -> ABS ( expression ) .)
    $end            reduce using rule 21 (expression -> ABS ( expression ) .)
    {               reduce using rule 21 (expression -> ABS ( expression ) .)
    )               reduce using rule 21 (expression -> ABS ( expression ) .)
    }               reduce using rule 21 (expression -> ABS ( expression ) .)
    ,               reduce using rule 21 (expression -> ABS ( expression ) .)


state 95

    (4) for -> FOR for_assign IN expression . statement_block
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression
    (10) statement_block -> . { statement_list }
    (12) statement_block -> . statement
    (6) statement -> . assign
    (13) statement -> . print
    (14) statement -> . expression
    (15) statement -> . for
    (41) statement -> . IF expression { statement_block }
    (42) statement -> . IF expression { statement } ELSE { statement_block }
    (7) assign -> . LET NAME = expression
    (8) assign -> . VAR NAME = expression
    (9) assign -> . NAME = expression
    (16) print -> . PRINT ( print_expression_list )
    (17) print -> . PRINT ( expression )
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression
    (4) for -> . FOR for_assign IN expression statement_block
    (5) for -> . WHILE expression statement_block

    POWER           shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 80
    *               shift and go to state 28
    /               shift and go to state 29
    %               shift and go to state 30
    ELLIPSIS        shift and go to state 31
    DOUBLE_EQ       shift and go to state 32
    NOT_EQ          shift and go to state 33
    >               shift and go to state 34
    <               shift and go to state 35
    LESS_EQ         shift and go to state 36
    GREATER_EQ      shift and go to state 37
    {               shift and go to state 81
    IF              shift and go to state 8
    LET             shift and go to state 9
    VAR             shift and go to state 11
    NAME            shift and go to state 10
    PRINT           shift and go to state 12
    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    NUMBER          shift and go to state 19
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13
    FOR             shift and go to state 22
    WHILE           shift and go to state 23

    expression                     shift and go to state 6
    statement_block                shift and go to state 102
    statement                      shift and go to state 82
    assign                         shift and go to state 4
    print                          shift and go to state 5
    for                            shift and go to state 7

state 96

    (25) expression -> expression - expression .
    (23) expression -> - expression .
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

  ! reduce/reduce conflict for POWER resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for + resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for - resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for * resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for / resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for % resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for ELLIPSIS resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for DOUBLE_EQ resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for NOT_EQ resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for > resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for < resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for LESS_EQ resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for GREATER_EQ resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for IF resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for LET resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for VAR resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for NAME resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for PRINT resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for READLINE resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for MIN resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for MAX resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for ABS resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for NUMBER resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for DQ_STRING resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for SQ_STRING resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for ( resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for FOR resolved using rule 23 (expression -> - expression .)
  ! reduce/reduce conflict for WHILE resolved using rule 23 (expression -> - expression .)
    {               reduce using rule 25 (expression -> expression - expression .)
    POWER           reduce using rule 23 (expression -> - expression .)
    +               reduce using rule 23 (expression -> - expression .)
    -               reduce using rule 23 (expression -> - expression .)
    *               reduce using rule 23 (expression -> - expression .)
    /               reduce using rule 23 (expression -> - expression .)
    %               reduce using rule 23 (expression -> - expression .)
    ELLIPSIS        reduce using rule 23 (expression -> - expression .)
    DOUBLE_EQ       reduce using rule 23 (expression -> - expression .)
    NOT_EQ          reduce using rule 23 (expression -> - expression .)
    >               reduce using rule 23 (expression -> - expression .)
    <               reduce using rule 23 (expression -> - expression .)
    LESS_EQ         reduce using rule 23 (expression -> - expression .)
    GREATER_EQ      reduce using rule 23 (expression -> - expression .)
    IF              reduce using rule 23 (expression -> - expression .)
    LET             reduce using rule 23 (expression -> - expression .)
    VAR             reduce using rule 23 (expression -> - expression .)
    NAME            reduce using rule 23 (expression -> - expression .)
    PRINT           reduce using rule 23 (expression -> - expression .)
    READLINE        reduce using rule 23 (expression -> - expression .)
    MIN             reduce using rule 23 (expression -> - expression .)
    MAX             reduce using rule 23 (expression -> - expression .)
    ABS             reduce using rule 23 (expression -> - expression .)
    NUMBER          reduce using rule 23 (expression -> - expression .)
    DQ_STRING       reduce using rule 23 (expression -> - expression .)
    SQ_STRING       reduce using rule 23 (expression -> - expression .)
    (               reduce using rule 23 (expression -> - expression .)
    FOR             reduce using rule 23 (expression -> - expression .)
    WHILE           reduce using rule 23 (expression -> - expression .)
    $end            reduce using rule 23 (expression -> - expression .)
    }               reduce using rule 23 (expression -> - expression .)

  ! POWER           [ reduce using rule 25 (expression -> expression - expression .) ]
  ! +               [ reduce using rule 25 (expression -> expression - expression .) ]
  ! -               [ reduce using rule 25 (expression -> expression - expression .) ]
  ! *               [ reduce using rule 25 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 25 (expression -> expression - expression .) ]
  ! %               [ reduce using rule 25 (expression -> expression - expression .) ]
  ! ELLIPSIS        [ reduce using rule 25 (expression -> expression - expression .) ]
  ! DOUBLE_EQ       [ reduce using rule 25 (expression -> expression - expression .) ]
  ! NOT_EQ          [ reduce using rule 25 (expression -> expression - expression .) ]
  ! >               [ reduce using rule 25 (expression -> expression - expression .) ]
  ! <               [ reduce using rule 25 (expression -> expression - expression .) ]
  ! LESS_EQ         [ reduce using rule 25 (expression -> expression - expression .) ]
  ! GREATER_EQ      [ reduce using rule 25 (expression -> expression - expression .) ]
  ! IF              [ reduce using rule 25 (expression -> expression - expression .) ]
  ! LET             [ reduce using rule 25 (expression -> expression - expression .) ]
  ! VAR             [ reduce using rule 25 (expression -> expression - expression .) ]
  ! NAME            [ reduce using rule 25 (expression -> expression - expression .) ]
  ! PRINT           [ reduce using rule 25 (expression -> expression - expression .) ]
  ! READLINE        [ reduce using rule 25 (expression -> expression - expression .) ]
  ! MIN             [ reduce using rule 25 (expression -> expression - expression .) ]
  ! MAX             [ reduce using rule 25 (expression -> expression - expression .) ]
  ! ABS             [ reduce using rule 25 (expression -> expression - expression .) ]
  ! NUMBER          [ reduce using rule 25 (expression -> expression - expression .) ]
  ! DQ_STRING       [ reduce using rule 25 (expression -> expression - expression .) ]
  ! SQ_STRING       [ reduce using rule 25 (expression -> expression - expression .) ]
  ! (               [ reduce using rule 25 (expression -> expression - expression .) ]
  ! FOR             [ reduce using rule 25 (expression -> expression - expression .) ]
  ! WHILE           [ reduce using rule 25 (expression -> expression - expression .) ]
  ! POWER           [ shift and go to state 25 ]
  ! +               [ shift and go to state 26 ]
  ! -               [ shift and go to state 27 ]
  ! *               [ shift and go to state 28 ]
  ! /               [ shift and go to state 29 ]
  ! %               [ shift and go to state 30 ]
  ! ELLIPSIS        [ shift and go to state 31 ]
  ! DOUBLE_EQ       [ shift and go to state 32 ]
  ! NOT_EQ          [ shift and go to state 33 ]
  ! >               [ shift and go to state 34 ]
  ! <               [ shift and go to state 35 ]
  ! LESS_EQ         [ shift and go to state 36 ]
  ! GREATER_EQ      [ shift and go to state 37 ]


state 97

    (10) statement_block -> { statement_list . }
    (2) statement_list -> statement_list . statement
    (6) statement -> . assign
    (13) statement -> . print
    (14) statement -> . expression
    (15) statement -> . for
    (41) statement -> . IF expression { statement_block }
    (42) statement -> . IF expression { statement } ELSE { statement_block }
    (7) assign -> . LET NAME = expression
    (8) assign -> . VAR NAME = expression
    (9) assign -> . NAME = expression
    (16) print -> . PRINT ( print_expression_list )
    (17) print -> . PRINT ( expression )
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression
    (4) for -> . FOR for_assign IN expression statement_block
    (5) for -> . WHILE expression statement_block

    }               shift and go to state 103
    IF              shift and go to state 8
    LET             shift and go to state 9
    VAR             shift and go to state 11
    NAME            shift and go to state 10
    PRINT           shift and go to state 12
    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13
    FOR             shift and go to state 22
    WHILE           shift and go to state 23

    statement                      shift and go to state 24
    assign                         shift and go to state 4
    print                          shift and go to state 5
    expression                     shift and go to state 6
    for                            shift and go to state 7

state 98

    (41) statement -> IF expression { statement_block } .

    IF              reduce using rule 41 (statement -> IF expression { statement_block } .)
    LET             reduce using rule 41 (statement -> IF expression { statement_block } .)
    VAR             reduce using rule 41 (statement -> IF expression { statement_block } .)
    NAME            reduce using rule 41 (statement -> IF expression { statement_block } .)
    PRINT           reduce using rule 41 (statement -> IF expression { statement_block } .)
    READLINE        reduce using rule 41 (statement -> IF expression { statement_block } .)
    MIN             reduce using rule 41 (statement -> IF expression { statement_block } .)
    MAX             reduce using rule 41 (statement -> IF expression { statement_block } .)
    ABS             reduce using rule 41 (statement -> IF expression { statement_block } .)
    -               reduce using rule 41 (statement -> IF expression { statement_block } .)
    NUMBER          reduce using rule 41 (statement -> IF expression { statement_block } .)
    DQ_STRING       reduce using rule 41 (statement -> IF expression { statement_block } .)
    SQ_STRING       reduce using rule 41 (statement -> IF expression { statement_block } .)
    (               reduce using rule 41 (statement -> IF expression { statement_block } .)
    FOR             reduce using rule 41 (statement -> IF expression { statement_block } .)
    WHILE           reduce using rule 41 (statement -> IF expression { statement_block } .)
    $end            reduce using rule 41 (statement -> IF expression { statement_block } .)
    }               reduce using rule 41 (statement -> IF expression { statement_block } .)


state 99

    (42) statement -> IF expression { statement } . ELSE { statement_block }

    ELSE            shift and go to state 104


state 100

    (19) expression -> MIN ( expression , expression . )
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

    )               shift and go to state 105
    POWER           shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29
    %               shift and go to state 30
    ELLIPSIS        shift and go to state 31
    DOUBLE_EQ       shift and go to state 32
    NOT_EQ          shift and go to state 33
    >               shift and go to state 34
    <               shift and go to state 35
    LESS_EQ         shift and go to state 36
    GREATER_EQ      shift and go to state 37


state 101

    (20) expression -> MAX ( expression , expression . )
    (22) expression -> expression . POWER expression
    (24) expression -> expression . + expression
    (25) expression -> expression . - expression
    (26) expression -> expression . * expression
    (27) expression -> expression . / expression
    (28) expression -> expression . % expression
    (29) expression -> expression . ELLIPSIS expression
    (35) expression -> expression . DOUBLE_EQ expression
    (36) expression -> expression . NOT_EQ expression
    (37) expression -> expression . > expression
    (38) expression -> expression . < expression
    (39) expression -> expression . LESS_EQ expression
    (40) expression -> expression . GREATER_EQ expression

    )               shift and go to state 106
    POWER           shift and go to state 25
    +               shift and go to state 26
    -               shift and go to state 27
    *               shift and go to state 28
    /               shift and go to state 29
    %               shift and go to state 30
    ELLIPSIS        shift and go to state 31
    DOUBLE_EQ       shift and go to state 32
    NOT_EQ          shift and go to state 33
    >               shift and go to state 34
    <               shift and go to state 35
    LESS_EQ         shift and go to state 36
    GREATER_EQ      shift and go to state 37


state 102

    (4) for -> FOR for_assign IN expression statement_block .

    IF              reduce using rule 4 (for -> FOR for_assign IN expression statement_block .)
    LET             reduce using rule 4 (for -> FOR for_assign IN expression statement_block .)
    VAR             reduce using rule 4 (for -> FOR for_assign IN expression statement_block .)
    NAME            reduce using rule 4 (for -> FOR for_assign IN expression statement_block .)
    PRINT           reduce using rule 4 (for -> FOR for_assign IN expression statement_block .)
    READLINE        reduce using rule 4 (for -> FOR for_assign IN expression statement_block .)
    MIN             reduce using rule 4 (for -> FOR for_assign IN expression statement_block .)
    MAX             reduce using rule 4 (for -> FOR for_assign IN expression statement_block .)
    ABS             reduce using rule 4 (for -> FOR for_assign IN expression statement_block .)
    -               reduce using rule 4 (for -> FOR for_assign IN expression statement_block .)
    NUMBER          reduce using rule 4 (for -> FOR for_assign IN expression statement_block .)
    DQ_STRING       reduce using rule 4 (for -> FOR for_assign IN expression statement_block .)
    SQ_STRING       reduce using rule 4 (for -> FOR for_assign IN expression statement_block .)
    (               reduce using rule 4 (for -> FOR for_assign IN expression statement_block .)
    FOR             reduce using rule 4 (for -> FOR for_assign IN expression statement_block .)
    WHILE           reduce using rule 4 (for -> FOR for_assign IN expression statement_block .)
    $end            reduce using rule 4 (for -> FOR for_assign IN expression statement_block .)
    }               reduce using rule 4 (for -> FOR for_assign IN expression statement_block .)


state 103

    (10) statement_block -> { statement_list } .

    IF              reduce using rule 10 (statement_block -> { statement_list } .)
    LET             reduce using rule 10 (statement_block -> { statement_list } .)
    VAR             reduce using rule 10 (statement_block -> { statement_list } .)
    NAME            reduce using rule 10 (statement_block -> { statement_list } .)
    PRINT           reduce using rule 10 (statement_block -> { statement_list } .)
    READLINE        reduce using rule 10 (statement_block -> { statement_list } .)
    MIN             reduce using rule 10 (statement_block -> { statement_list } .)
    MAX             reduce using rule 10 (statement_block -> { statement_list } .)
    ABS             reduce using rule 10 (statement_block -> { statement_list } .)
    -               reduce using rule 10 (statement_block -> { statement_list } .)
    NUMBER          reduce using rule 10 (statement_block -> { statement_list } .)
    DQ_STRING       reduce using rule 10 (statement_block -> { statement_list } .)
    SQ_STRING       reduce using rule 10 (statement_block -> { statement_list } .)
    (               reduce using rule 10 (statement_block -> { statement_list } .)
    FOR             reduce using rule 10 (statement_block -> { statement_list } .)
    WHILE           reduce using rule 10 (statement_block -> { statement_list } .)
    $end            reduce using rule 10 (statement_block -> { statement_list } .)
    }               reduce using rule 10 (statement_block -> { statement_list } .)


state 104

    (42) statement -> IF expression { statement } ELSE . { statement_block }

    {               shift and go to state 107


state 105

    (19) expression -> MIN ( expression , expression ) .

    POWER           reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    +               reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    -               reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    *               reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    /               reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    %               reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    ELLIPSIS        reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    DOUBLE_EQ       reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    NOT_EQ          reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    >               reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    <               reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    LESS_EQ         reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    GREATER_EQ      reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    IF              reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    LET             reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    VAR             reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    NAME            reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    PRINT           reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    READLINE        reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    MIN             reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    MAX             reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    ABS             reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    NUMBER          reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    DQ_STRING       reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    SQ_STRING       reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    (               reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    FOR             reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    WHILE           reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    $end            reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    {               reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    )               reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    }               reduce using rule 19 (expression -> MIN ( expression , expression ) .)
    ,               reduce using rule 19 (expression -> MIN ( expression , expression ) .)


state 106

    (20) expression -> MAX ( expression , expression ) .

    POWER           reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    +               reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    -               reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    *               reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    /               reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    %               reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    ELLIPSIS        reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    DOUBLE_EQ       reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    NOT_EQ          reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    >               reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    <               reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    LESS_EQ         reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    GREATER_EQ      reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    IF              reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    LET             reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    VAR             reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    NAME            reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    PRINT           reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    READLINE        reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    MIN             reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    MAX             reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    ABS             reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    NUMBER          reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    DQ_STRING       reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    SQ_STRING       reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    (               reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    FOR             reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    WHILE           reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    $end            reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    {               reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    )               reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    }               reduce using rule 20 (expression -> MAX ( expression , expression ) .)
    ,               reduce using rule 20 (expression -> MAX ( expression , expression ) .)


state 107

    (42) statement -> IF expression { statement } ELSE { . statement_block }
    (10) statement_block -> . { statement_list }
    (12) statement_block -> . statement
    (6) statement -> . assign
    (13) statement -> . print
    (14) statement -> . expression
    (15) statement -> . for
    (41) statement -> . IF expression { statement_block }
    (42) statement -> . IF expression { statement } ELSE { statement_block }
    (7) assign -> . LET NAME = expression
    (8) assign -> . VAR NAME = expression
    (9) assign -> . NAME = expression
    (16) print -> . PRINT ( print_expression_list )
    (17) print -> . PRINT ( expression )
    (18) expression -> . READLINE ( )
    (19) expression -> . MIN ( expression , expression )
    (20) expression -> . MAX ( expression , expression )
    (21) expression -> . ABS ( expression )
    (22) expression -> . expression POWER expression
    (23) expression -> . - expression
    (24) expression -> . expression + expression
    (25) expression -> . expression - expression
    (26) expression -> . expression * expression
    (27) expression -> . expression / expression
    (28) expression -> . expression % expression
    (29) expression -> . expression ELLIPSIS expression
    (30) expression -> . NUMBER
    (31) expression -> . NAME
    (32) expression -> . DQ_STRING
    (33) expression -> . SQ_STRING
    (34) expression -> . ( expression )
    (35) expression -> . expression DOUBLE_EQ expression
    (36) expression -> . expression NOT_EQ expression
    (37) expression -> . expression > expression
    (38) expression -> . expression < expression
    (39) expression -> . expression LESS_EQ expression
    (40) expression -> . expression GREATER_EQ expression
    (4) for -> . FOR for_assign IN expression statement_block
    (5) for -> . WHILE expression statement_block

    {               shift and go to state 81
    IF              shift and go to state 8
    LET             shift and go to state 9
    VAR             shift and go to state 11
    NAME            shift and go to state 10
    PRINT           shift and go to state 12
    READLINE        shift and go to state 14
    MIN             shift and go to state 15
    MAX             shift and go to state 16
    ABS             shift and go to state 17
    -               shift and go to state 18
    NUMBER          shift and go to state 19
    DQ_STRING       shift and go to state 20
    SQ_STRING       shift and go to state 21
    (               shift and go to state 13
    FOR             shift and go to state 22
    WHILE           shift and go to state 23

    expression                     shift and go to state 6
    statement                      shift and go to state 82
    statement_block                shift and go to state 108
    assign                         shift and go to state 4
    print                          shift and go to state 5
    for                            shift and go to state 7

state 108

    (42) statement -> IF expression { statement } ELSE { statement_block . }

    }               shift and go to state 109


state 109

    (42) statement -> IF expression { statement } ELSE { statement_block } .

    IF              reduce using rule 42 (statement -> IF expression { statement } ELSE { statement_block } .)
    LET             reduce using rule 42 (statement -> IF expression { statement } ELSE { statement_block } .)
    VAR             reduce using rule 42 (statement -> IF expression { statement } ELSE { statement_block } .)
    NAME            reduce using rule 42 (statement -> IF expression { statement } ELSE { statement_block } .)
    PRINT           reduce using rule 42 (statement -> IF expression { statement } ELSE { statement_block } .)
    READLINE        reduce using rule 42 (statement -> IF expression { statement } ELSE { statement_block } .)
    MIN             reduce using rule 42 (statement -> IF expression { statement } ELSE { statement_block } .)
    MAX             reduce using rule 42 (statement -> IF expression { statement } ELSE { statement_block } .)
    ABS             reduce using rule 42 (statement -> IF expression { statement } ELSE { statement_block } .)
    -               reduce using rule 42 (statement -> IF expression { statement } ELSE { statement_block } .)
    NUMBER          reduce using rule 42 (statement -> IF expression { statement } ELSE { statement_block } .)
    DQ_STRING       reduce using rule 42 (statement -> IF expression { statement } ELSE { statement_block } .)
    SQ_STRING       reduce using rule 42 (statement -> IF expression { statement } ELSE { statement_block } .)
    (               reduce using rule 42 (statement -> IF expression { statement } ELSE { statement_block } .)
    FOR             reduce using rule 42 (statement -> IF expression { statement } ELSE { statement_block } .)
    WHILE           reduce using rule 42 (statement -> IF expression { statement } ELSE { statement_block } .)
    $end            reduce using rule 42 (statement -> IF expression { statement } ELSE { statement_block } .)
    }               reduce using rule 42 (statement -> IF expression { statement } ELSE { statement_block } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for - in state 6 resolved as shift
WARNING: shift/reduce conflict for READLINE in state 43 resolved as shift
WARNING: shift/reduce conflict for MIN in state 43 resolved as shift
WARNING: shift/reduce conflict for MAX in state 43 resolved as shift
WARNING: shift/reduce conflict for ABS in state 43 resolved as shift
WARNING: shift/reduce conflict for - in state 43 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 43 resolved as shift
WARNING: shift/reduce conflict for NAME in state 43 resolved as shift
WARNING: shift/reduce conflict for DQ_STRING in state 43 resolved as shift
WARNING: shift/reduce conflict for SQ_STRING in state 43 resolved as shift
WARNING: shift/reduce conflict for ( in state 43 resolved as shift
WARNING: shift/reduce conflict for POWER in state 53 resolved as shift
WARNING: shift/reduce conflict for + in state 53 resolved as shift
WARNING: shift/reduce conflict for - in state 53 resolved as shift
WARNING: shift/reduce conflict for * in state 53 resolved as shift
WARNING: shift/reduce conflict for / in state 53 resolved as shift
WARNING: shift/reduce conflict for % in state 53 resolved as shift
WARNING: shift/reduce conflict for ELLIPSIS in state 53 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQ in state 53 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 53 resolved as shift
WARNING: shift/reduce conflict for > in state 53 resolved as shift
WARNING: shift/reduce conflict for < in state 53 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ in state 53 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ in state 53 resolved as shift
WARNING: shift/reduce conflict for POWER in state 58 resolved as shift
WARNING: shift/reduce conflict for + in state 58 resolved as shift
WARNING: shift/reduce conflict for - in state 58 resolved as shift
WARNING: shift/reduce conflict for * in state 58 resolved as shift
WARNING: shift/reduce conflict for / in state 58 resolved as shift
WARNING: shift/reduce conflict for % in state 58 resolved as shift
WARNING: shift/reduce conflict for ELLIPSIS in state 58 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQ in state 58 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 58 resolved as shift
WARNING: shift/reduce conflict for > in state 58 resolved as shift
WARNING: shift/reduce conflict for < in state 58 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ in state 58 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ in state 58 resolved as shift
WARNING: shift/reduce conflict for POWER in state 60 resolved as shift
WARNING: shift/reduce conflict for + in state 60 resolved as shift
WARNING: shift/reduce conflict for - in state 60 resolved as shift
WARNING: shift/reduce conflict for * in state 60 resolved as shift
WARNING: shift/reduce conflict for / in state 60 resolved as shift
WARNING: shift/reduce conflict for % in state 60 resolved as shift
WARNING: shift/reduce conflict for ELLIPSIS in state 60 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQ in state 60 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 60 resolved as shift
WARNING: shift/reduce conflict for > in state 60 resolved as shift
WARNING: shift/reduce conflict for < in state 60 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ in state 60 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ in state 60 resolved as shift
WARNING: shift/reduce conflict for POWER in state 61 resolved as shift
WARNING: shift/reduce conflict for + in state 61 resolved as shift
WARNING: shift/reduce conflict for - in state 61 resolved as shift
WARNING: shift/reduce conflict for * in state 61 resolved as shift
WARNING: shift/reduce conflict for / in state 61 resolved as shift
WARNING: shift/reduce conflict for % in state 61 resolved as shift
WARNING: shift/reduce conflict for ELLIPSIS in state 61 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQ in state 61 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 61 resolved as shift
WARNING: shift/reduce conflict for > in state 61 resolved as shift
WARNING: shift/reduce conflict for < in state 61 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ in state 61 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ in state 61 resolved as shift
WARNING: shift/reduce conflict for POWER in state 62 resolved as shift
WARNING: shift/reduce conflict for + in state 62 resolved as shift
WARNING: shift/reduce conflict for - in state 62 resolved as shift
WARNING: shift/reduce conflict for * in state 62 resolved as shift
WARNING: shift/reduce conflict for / in state 62 resolved as shift
WARNING: shift/reduce conflict for % in state 62 resolved as shift
WARNING: shift/reduce conflict for ELLIPSIS in state 62 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQ in state 62 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 62 resolved as shift
WARNING: shift/reduce conflict for > in state 62 resolved as shift
WARNING: shift/reduce conflict for < in state 62 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ in state 62 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ in state 62 resolved as shift
WARNING: shift/reduce conflict for POWER in state 63 resolved as shift
WARNING: shift/reduce conflict for + in state 63 resolved as shift
WARNING: shift/reduce conflict for - in state 63 resolved as shift
WARNING: shift/reduce conflict for * in state 63 resolved as shift
WARNING: shift/reduce conflict for / in state 63 resolved as shift
WARNING: shift/reduce conflict for % in state 63 resolved as shift
WARNING: shift/reduce conflict for ELLIPSIS in state 63 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQ in state 63 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 63 resolved as shift
WARNING: shift/reduce conflict for > in state 63 resolved as shift
WARNING: shift/reduce conflict for < in state 63 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ in state 63 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ in state 63 resolved as shift
WARNING: shift/reduce conflict for POWER in state 64 resolved as shift
WARNING: shift/reduce conflict for + in state 64 resolved as shift
WARNING: shift/reduce conflict for - in state 64 resolved as shift
WARNING: shift/reduce conflict for * in state 64 resolved as shift
WARNING: shift/reduce conflict for / in state 64 resolved as shift
WARNING: shift/reduce conflict for % in state 64 resolved as shift
WARNING: shift/reduce conflict for ELLIPSIS in state 64 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQ in state 64 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 64 resolved as shift
WARNING: shift/reduce conflict for > in state 64 resolved as shift
WARNING: shift/reduce conflict for < in state 64 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ in state 64 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ in state 64 resolved as shift
WARNING: shift/reduce conflict for POWER in state 65 resolved as shift
WARNING: shift/reduce conflict for + in state 65 resolved as shift
WARNING: shift/reduce conflict for - in state 65 resolved as shift
WARNING: shift/reduce conflict for * in state 65 resolved as shift
WARNING: shift/reduce conflict for / in state 65 resolved as shift
WARNING: shift/reduce conflict for % in state 65 resolved as shift
WARNING: shift/reduce conflict for ELLIPSIS in state 65 resolved as shift
WARNING: shift/reduce conflict for DOUBLE_EQ in state 65 resolved as shift
WARNING: shift/reduce conflict for NOT_EQ in state 65 resolved as shift
WARNING: shift/reduce conflict for > in state 65 resolved as shift
WARNING: shift/reduce conflict for < in state 65 resolved as shift
WARNING: shift/reduce conflict for LESS_EQ in state 65 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQ in state 65 resolved as shift
WARNING: shift/reduce conflict for - in state 68 resolved as shift
WARNING: shift/reduce conflict for } in state 84 resolved as shift
WARNING: shift/reduce conflict for - in state 85 resolved as shift
WARNING: shift/reduce conflict for - in state 86 resolved as shift
WARNING: reduce/reduce conflict in state 96 resolved using rule (expression -> - expression)
WARNING: rejected rule (expression -> expression - expression) in state 96
